// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

namespace {

const ::google::protobuf::Descriptor* StopLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedBump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedBump_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pole_reflection_ = NULL;
const ::google::protobuf::Descriptor* Board_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Board_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossWalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossWalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParkingSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParkingSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* Junction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Junction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_2eproto() {
  protobuf_AddDesc_object_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object.proto");
  GOOGLE_CHECK(file != NULL);
  StopLine_descriptor_ = file->message_type(0);
  static const int StopLine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, link_ids_),
  };
  StopLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopLine_descriptor_,
      StopLine::default_instance_,
      StopLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopLine));
  SpeedBump_descriptor_ = file->message_type(1);
  static const int SpeedBump_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, link_ids_),
  };
  SpeedBump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedBump_descriptor_,
      SpeedBump::default_instance_,
      SpeedBump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedBump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedBump));
  Pole_descriptor_ = file->message_type(2);
  static const int Pole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, cylinder_),
  };
  Pole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pole_descriptor_,
      Pole::default_instance_,
      Pole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pole));
  Board_descriptor_ = file->message_type(3);
  static const int Board_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, polygon_),
  };
  Board_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Board_descriptor_,
      Board::default_instance_,
      Board_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Board, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Board));
  CrossWalk_descriptor_ = file->message_type(4);
  static const int CrossWalk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, link_ids_),
  };
  CrossWalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossWalk_descriptor_,
      CrossWalk::default_instance_,
      CrossWalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossWalk));
  Zone_descriptor_ = file->message_type(5);
  static const int Zone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, link_ids_),
  };
  Zone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_descriptor_,
      Zone::default_instance_,
      Zone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone));
  ParkingSpace_descriptor_ = file->message_type(6);
  static const int ParkingSpace_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, parkingslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, link_ids_),
  };
  ParkingSpace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParkingSpace_descriptor_,
      ParkingSpace::default_instance_,
      ParkingSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingSpace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParkingSpace));
  Junction_descriptor_ = file->message_type(7);
  static const int Junction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, tile_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, link_ids_),
  };
  Junction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Junction_descriptor_,
      Junction::default_instance_,
      Junction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Junction));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopLine_descriptor_, &StopLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedBump_descriptor_, &SpeedBump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pole_descriptor_, &Pole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Board_descriptor_, &Board::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossWalk_descriptor_, &CrossWalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_descriptor_, &Zone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParkingSpace_descriptor_, &ParkingSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Junction_descriptor_, &Junction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_2eproto() {
  delete StopLine::default_instance_;
  delete StopLine_reflection_;
  delete SpeedBump::default_instance_;
  delete SpeedBump_reflection_;
  delete Pole::default_instance_;
  delete Pole_reflection_;
  delete Board::default_instance_;
  delete Board_reflection_;
  delete CrossWalk::default_instance_;
  delete CrossWalk_reflection_;
  delete Zone::default_instance_;
  delete Zone_reflection_;
  delete ParkingSpace::default_instance_;
  delete ParkingSpace_reflection_;
  delete Junction::default_instance_;
  delete Junction_reflection_;
}

void protobuf_AddDesc_object_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hdmap_proto::protobuf_AddDesc_id_2eproto();
  ::hdmap_proto::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014object.proto\022\013hdmap_proto\032\010id.proto\032\016g"
    "eometry.proto\"\224\001\n\010StopLine\022\033\n\002id\030\001 \002(\0132\017"
    ".hdmap_proto.Id\022!\n\010tile_ids\030\002 \003(\0132\017.hdma"
    "p_proto.Id\022%\n\007polygon\030\004 \002(\0132\024.hdmap_prot"
    "o.Polygon\022!\n\010link_ids\030\005 \003(\0132\017.hdmap_prot"
    "o.Id\"\245\001\n\tSpeedBump\022\033\n\002id\030\001 \002(\0132\017.hdmap_p"
    "roto.Id\022!\n\010tile_ids\030\002 \003(\0132\017.hdmap_proto."
    "Id\022%\n\007polygon\030\004 \002(\0132\024.hdmap_proto.Polygo"
    "n\022\016\n\006height\030\005 \002(\002\022!\n\010link_ids\030\006 \003(\0132\017.hd"
    "map_proto.Id\"o\n\004Pole\022\033\n\002id\030\001 \002(\0132\017.hdmap"
    "_proto.Id\022!\n\010tile_ids\030\002 \003(\0132\017.hdmap_prot"
    "o.Id\022\'\n\010cylinder\030\003 \002(\0132\025.hdmap_proto.Cyl"
    "inder\"n\n\005Board\022\033\n\002id\030\001 \002(\0132\017.hdmap_proto"
    ".Id\022!\n\010tile_ids\030\002 \003(\0132\017.hdmap_proto.Id\022%"
    "\n\007polygon\030\003 \002(\0132\024.hdmap_proto.Polygon\"\307\001"
    "\n\tCrossWalk\022\033\n\002id\030\001 \002(\0132\017.hdmap_proto.Id"
    "\022!\n\010tile_ids\030\002 \003(\0132\017.hdmap_proto.Id\022\014\n\004n"
    "ame\030\003 \001(\t\022$\n\006border\030\004 \002(\0132\024.hdmap_proto."
    "Polygon\022#\n\005lines\030\005 \003(\0132\024.hdmap_proto.Pol"
    "ygon\022!\n\010link_ids\030\006 \003(\0132\017.hdmap_proto.Id\""
    "\217\001\n\004Zone\022\033\n\002id\030\001 \002(\0132\017.hdmap_proto.Id\022!\n"
    "\010tile_ids\030\002 \003(\0132\017.hdmap_proto.Id\022$\n\006bord"
    "er\030\003 \002(\0132\024.hdmap_proto.Polygon\022!\n\010link_i"
    "ds\030\004 \003(\0132\017.hdmap_proto.Id\"\241\001\n\014ParkingSpa"
    "ce\022\033\n\002id\030\001 \002(\0132\017.hdmap_proto.Id\022!\n\010tile_"
    "ids\030\002 \003(\0132\017.hdmap_proto.Id\022.\n\014parkingslo"
    "ts\030\003 \003(\0132\030.hdmap_proto.ParkingSlot\022!\n\010li"
    "nk_ids\030\004 \003(\0132\017.hdmap_proto.Id\"\224\001\n\010Juncti"
    "on\022\033\n\002id\030\001 \002(\0132\017.hdmap_proto.Id\022!\n\010tile_"
    "ids\030\002 \003(\0132\017.hdmap_proto.Id\022%\n\007polygon\030\004 "
    "\002(\0132\024.hdmap_proto.Polygon\022!\n\010link_ids\030\005 "
    "\003(\0132\017.hdmap_proto.Id", 1260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object.proto", &protobuf_RegisterTypes);
  StopLine::default_instance_ = new StopLine();
  SpeedBump::default_instance_ = new SpeedBump();
  Pole::default_instance_ = new Pole();
  Board::default_instance_ = new Board();
  CrossWalk::default_instance_ = new CrossWalk();
  Zone::default_instance_ = new Zone();
  ParkingSpace::default_instance_ = new ParkingSpace();
  Junction::default_instance_ = new Junction();
  StopLine::default_instance_->InitAsDefaultInstance();
  SpeedBump::default_instance_->InitAsDefaultInstance();
  Pole::default_instance_->InitAsDefaultInstance();
  Board::default_instance_->InitAsDefaultInstance();
  CrossWalk::default_instance_->InitAsDefaultInstance();
  Zone::default_instance_->InitAsDefaultInstance();
  ParkingSpace::default_instance_->InitAsDefaultInstance();
  Junction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_2eproto {
  StaticDescriptorInitializer_object_2eproto() {
    protobuf_AddDesc_object_2eproto();
  }
} static_descriptor_initializer_object_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StopLine::kIdFieldNumber;
const int StopLine::kTileIdsFieldNumber;
const int StopLine::kPolygonFieldNumber;
const int StopLine::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

StopLine::StopLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.StopLine)
}

void StopLine::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  polygon_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

StopLine::StopLine(const StopLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.StopLine)
}

void StopLine::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  polygon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopLine::~StopLine() {
  // @@protoc_insertion_point(destructor:hdmap_proto.StopLine)
  SharedDtor();
}

void StopLine::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete polygon_;
  }
}

void StopLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopLine_descriptor_;
}

const StopLine& StopLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

StopLine* StopLine::default_instance_ = NULL;

StopLine* StopLine::New() const {
  return new StopLine;
}

void StopLine::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
    }
  }
  tile_ids_.Clear();
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.StopLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(34)) goto parse_polygon;
        break;
      }

      // required .hdmap_proto.Polygon polygon = 4;
      case 4: {
        if (tag == 34) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.StopLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.StopLine)
  return false;
#undef DO_
}

void StopLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.StopLine)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // required .hdmap_proto.Polygon polygon = 4;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->polygon(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.StopLine)
}

::google::protobuf::uint8* StopLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.StopLine)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // required .hdmap_proto.Polygon polygon = 4;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->polygon(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.StopLine)
  return target;
}

int StopLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon polygon = 4;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopLine::MergeFrom(const StopLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_polygon()) {
      mutable_polygon()->::hdmap_proto::Polygon::MergeFrom(from.polygon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLine::CopyFrom(const StopLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void StopLine::Swap(StopLine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(polygon_, other->polygon_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopLine_descriptor_;
  metadata.reflection = StopLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedBump::kIdFieldNumber;
const int SpeedBump::kTileIdsFieldNumber;
const int SpeedBump::kPolygonFieldNumber;
const int SpeedBump::kHeightFieldNumber;
const int SpeedBump::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

SpeedBump::SpeedBump()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.SpeedBump)
}

void SpeedBump::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  polygon_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

SpeedBump::SpeedBump(const SpeedBump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.SpeedBump)
}

void SpeedBump::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  polygon_ = NULL;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedBump::~SpeedBump() {
  // @@protoc_insertion_point(destructor:hdmap_proto.SpeedBump)
  SharedDtor();
}

void SpeedBump::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete polygon_;
  }
}

void SpeedBump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedBump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedBump_descriptor_;
}

const SpeedBump& SpeedBump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

SpeedBump* SpeedBump::default_instance_ = NULL;

SpeedBump* SpeedBump::New() const {
  return new SpeedBump;
}

void SpeedBump::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
    }
    height_ = 0;
  }
  tile_ids_.Clear();
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedBump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.SpeedBump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(34)) goto parse_polygon;
        break;
      }

      // required .hdmap_proto.Polygon polygon = 4;
      case 4: {
        if (tag == 34) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_height;
        break;
      }

      // required float height = 5;
      case 5: {
        if (tag == 45) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 6;
      case 6: {
        if (tag == 50) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.SpeedBump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.SpeedBump)
  return false;
#undef DO_
}

void SpeedBump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.SpeedBump)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // required .hdmap_proto.Polygon polygon = 4;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->polygon(), output);
  }

  // required float height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 6;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.SpeedBump)
}

::google::protobuf::uint8* SpeedBump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.SpeedBump)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // required .hdmap_proto.Polygon polygon = 4;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->polygon(), target);
  }

  // required float height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 6;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.SpeedBump)
  return target;
}

int SpeedBump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon polygon = 4;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

    // required float height = 5;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  // repeated .hdmap_proto.Id link_ids = 6;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedBump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedBump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedBump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedBump::MergeFrom(const SpeedBump& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_polygon()) {
      mutable_polygon()->::hdmap_proto::Polygon::MergeFrom(from.polygon());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedBump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBump::CopyFrom(const SpeedBump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBump::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void SpeedBump::Swap(SpeedBump* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(polygon_, other->polygon_);
    std::swap(height_, other->height_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedBump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedBump_descriptor_;
  metadata.reflection = SpeedBump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pole::kIdFieldNumber;
const int Pole::kTileIdsFieldNumber;
const int Pole::kCylinderFieldNumber;
#endif  // !_MSC_VER

Pole::Pole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Pole)
}

void Pole::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  cylinder_ = const_cast< ::hdmap_proto::Cylinder*>(&::hdmap_proto::Cylinder::default_instance());
}

Pole::Pole(const Pole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Pole)
}

void Pole::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  cylinder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pole::~Pole() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Pole)
  SharedDtor();
}

void Pole::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete cylinder_;
  }
}

void Pole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pole_descriptor_;
}

const Pole& Pole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Pole* Pole::default_instance_ = NULL;

Pole* Pole::New() const {
  return new Pole;
}

void Pole::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_cylinder()) {
      if (cylinder_ != NULL) cylinder_->::hdmap_proto::Cylinder::Clear();
    }
  }
  tile_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Pole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(26)) goto parse_cylinder;
        break;
      }

      // required .hdmap_proto.Cylinder cylinder = 3;
      case 3: {
        if (tag == 26) {
         parse_cylinder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cylinder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Pole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Pole)
  return false;
#undef DO_
}

void Pole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Pole)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // required .hdmap_proto.Cylinder cylinder = 3;
  if (has_cylinder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cylinder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Pole)
}

::google::protobuf::uint8* Pole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Pole)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // required .hdmap_proto.Cylinder cylinder = 3;
  if (has_cylinder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cylinder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Pole)
  return target;
}

int Pole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Cylinder cylinder = 3;
    if (has_cylinder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cylinder());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pole::MergeFrom(const Pole& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_cylinder()) {
      mutable_cylinder()->::hdmap_proto::Cylinder::MergeFrom(from.cylinder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pole::CopyFrom(const Pole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_cylinder()) {
    if (!this->cylinder().IsInitialized()) return false;
  }
  return true;
}

void Pole::Swap(Pole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(cylinder_, other->cylinder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pole_descriptor_;
  metadata.reflection = Pole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Board::kIdFieldNumber;
const int Board::kTileIdsFieldNumber;
const int Board::kPolygonFieldNumber;
#endif  // !_MSC_VER

Board::Board()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Board)
}

void Board::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  polygon_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

Board::Board(const Board& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Board)
}

void Board::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  polygon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Board::~Board() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Board)
  SharedDtor();
}

void Board::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete polygon_;
  }
}

void Board::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Board::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Board_descriptor_;
}

const Board& Board::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Board* Board::default_instance_ = NULL;

Board* Board::New() const {
  return new Board;
}

void Board::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
    }
  }
  tile_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Board::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Board)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(26)) goto parse_polygon;
        break;
      }

      // required .hdmap_proto.Polygon polygon = 3;
      case 3: {
        if (tag == 26) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Board)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Board)
  return false;
#undef DO_
}

void Board::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Board)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // required .hdmap_proto.Polygon polygon = 3;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->polygon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Board)
}

::google::protobuf::uint8* Board::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Board)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // required .hdmap_proto.Polygon polygon = 3;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->polygon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Board)
  return target;
}

int Board::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon polygon = 3;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Board::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Board* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Board*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Board::MergeFrom(const Board& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_polygon()) {
      mutable_polygon()->::hdmap_proto::Polygon::MergeFrom(from.polygon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Board::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Board::CopyFrom(const Board& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Board::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  return true;
}

void Board::Swap(Board* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(polygon_, other->polygon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Board::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Board_descriptor_;
  metadata.reflection = Board_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossWalk::kIdFieldNumber;
const int CrossWalk::kTileIdsFieldNumber;
const int CrossWalk::kNameFieldNumber;
const int CrossWalk::kBorderFieldNumber;
const int CrossWalk::kLinesFieldNumber;
const int CrossWalk::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

CrossWalk::CrossWalk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.CrossWalk)
}

void CrossWalk::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  border_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

CrossWalk::CrossWalk(const CrossWalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.CrossWalk)
}

void CrossWalk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  border_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossWalk::~CrossWalk() {
  // @@protoc_insertion_point(destructor:hdmap_proto.CrossWalk)
  SharedDtor();
}

void CrossWalk::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete id_;
    delete border_;
  }
}

void CrossWalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossWalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossWalk_descriptor_;
}

const CrossWalk& CrossWalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

CrossWalk* CrossWalk::default_instance_ = NULL;

CrossWalk* CrossWalk::New() const {
  return new CrossWalk;
}

void CrossWalk::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_border()) {
      if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
    }
  }
  tile_ids_.Clear();
  lines_.Clear();
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossWalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.CrossWalk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_border;
        break;
      }

      // required .hdmap_proto.Polygon border = 4;
      case 4: {
        if (tag == 34) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lines;
        break;
      }

      // repeated .hdmap_proto.Polygon lines = 5;
      case 5: {
        if (tag == 42) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lines;
        if (input->ExpectTag(50)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 6;
      case 6: {
        if (tag == 50) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.CrossWalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.CrossWalk)
  return false;
#undef DO_
}

void CrossWalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.CrossWalk)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required .hdmap_proto.Polygon border = 4;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->border(), output);
  }

  // repeated .hdmap_proto.Polygon lines = 5;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lines(i), output);
  }

  // repeated .hdmap_proto.Id link_ids = 6;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.CrossWalk)
}

::google::protobuf::uint8* CrossWalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.CrossWalk)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required .hdmap_proto.Polygon border = 4;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->border(), target);
  }

  // repeated .hdmap_proto.Polygon lines = 5;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lines(i), target);
  }

  // repeated .hdmap_proto.Id link_ids = 6;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.CrossWalk)
  return target;
}

int CrossWalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .hdmap_proto.Polygon border = 4;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  // repeated .hdmap_proto.Polygon lines = 5;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  // repeated .hdmap_proto.Id link_ids = 6;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossWalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossWalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossWalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossWalk::MergeFrom(const CrossWalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  lines_.MergeFrom(from.lines_);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_border()) {
      mutable_border()->::hdmap_proto::Polygon::MergeFrom(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossWalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossWalk::CopyFrom(const CrossWalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossWalk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void CrossWalk::Swap(CrossWalk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(name_, other->name_);
    std::swap(border_, other->border_);
    lines_.Swap(&other->lines_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossWalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossWalk_descriptor_;
  metadata.reflection = CrossWalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone::kIdFieldNumber;
const int Zone::kTileIdsFieldNumber;
const int Zone::kBorderFieldNumber;
const int Zone::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

Zone::Zone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Zone)
}

void Zone::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  border_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

Zone::Zone(const Zone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Zone)
}

void Zone::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  border_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Zone)
  SharedDtor();
}

void Zone::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete border_;
  }
}

void Zone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_descriptor_;
}

const Zone& Zone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Zone* Zone::default_instance_ = NULL;

Zone* Zone::New() const {
  return new Zone;
}

void Zone::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_border()) {
      if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
    }
  }
  tile_ids_.Clear();
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Zone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(26)) goto parse_border;
        break;
      }

      // required .hdmap_proto.Polygon border = 3;
      case 3: {
        if (tag == 26) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Zone)
  return false;
#undef DO_
}

void Zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Zone)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // required .hdmap_proto.Polygon border = 3;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->border(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Zone)
}

::google::protobuf::uint8* Zone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Zone)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // required .hdmap_proto.Polygon border = 3;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->border(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Zone)
  return target;
}

int Zone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon border = 3;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone::MergeFrom(const Zone& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_border()) {
      mutable_border()->::hdmap_proto::Polygon::MergeFrom(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone::CopyFrom(const Zone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void Zone::Swap(Zone* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(border_, other->border_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_descriptor_;
  metadata.reflection = Zone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParkingSpace::kIdFieldNumber;
const int ParkingSpace::kTileIdsFieldNumber;
const int ParkingSpace::kParkingslotsFieldNumber;
const int ParkingSpace::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

ParkingSpace::ParkingSpace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.ParkingSpace)
}

void ParkingSpace::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
}

ParkingSpace::ParkingSpace(const ParkingSpace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.ParkingSpace)
}

void ParkingSpace::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParkingSpace::~ParkingSpace() {
  // @@protoc_insertion_point(destructor:hdmap_proto.ParkingSpace)
  SharedDtor();
}

void ParkingSpace::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void ParkingSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParkingSpace_descriptor_;
}

const ParkingSpace& ParkingSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

ParkingSpace* ParkingSpace::default_instance_ = NULL;

ParkingSpace* ParkingSpace::New() const {
  return new ParkingSpace;
}

void ParkingSpace::Clear() {
  if (has_id()) {
    if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  }
  tile_ids_.Clear();
  parkingslots_.Clear();
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParkingSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.ParkingSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(26)) goto parse_parkingslots;
        break;
      }

      // repeated .hdmap_proto.ParkingSlot parkingslots = 3;
      case 3: {
        if (tag == 26) {
         parse_parkingslots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parkingslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parkingslots;
        if (input->ExpectTag(34)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.ParkingSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.ParkingSpace)
  return false;
#undef DO_
}

void ParkingSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.ParkingSpace)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // repeated .hdmap_proto.ParkingSlot parkingslots = 3;
  for (int i = 0; i < this->parkingslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parkingslots(i), output);
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.ParkingSpace)
}

::google::protobuf::uint8* ParkingSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.ParkingSpace)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // repeated .hdmap_proto.ParkingSlot parkingslots = 3;
  for (int i = 0; i < this->parkingslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parkingslots(i), target);
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.ParkingSpace)
  return target;
}

int ParkingSpace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  // repeated .hdmap_proto.ParkingSlot parkingslots = 3;
  total_size += 1 * this->parkingslots_size();
  for (int i = 0; i < this->parkingslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parkingslots(i));
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSpace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParkingSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParkingSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParkingSpace::MergeFrom(const ParkingSpace& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  parkingslots_.MergeFrom(from.parkingslots_);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParkingSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpace::CopyFrom(const ParkingSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->parkingslots())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void ParkingSpace::Swap(ParkingSpace* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    parkingslots_.Swap(&other->parkingslots_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParkingSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParkingSpace_descriptor_;
  metadata.reflection = ParkingSpace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Junction::kIdFieldNumber;
const int Junction::kTileIdsFieldNumber;
const int Junction::kPolygonFieldNumber;
const int Junction::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

Junction::Junction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Junction)
}

void Junction::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  polygon_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

Junction::Junction(const Junction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Junction)
}

void Junction::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  polygon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Junction::~Junction() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Junction)
  SharedDtor();
}

void Junction::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete polygon_;
  }
}

void Junction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Junction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Junction_descriptor_;
}

const Junction& Junction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Junction* Junction::default_instance_ = NULL;

Junction* Junction::New() const {
  return new Junction;
}

void Junction::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
    }
  }
  tile_ids_.Clear();
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Junction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Junction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        break;
      }

      // repeated .hdmap_proto.Id tile_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_ids;
        if (input->ExpectTag(34)) goto parse_polygon;
        break;
      }

      // required .hdmap_proto.Polygon polygon = 4;
      case 4: {
        if (tag == 34) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Junction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Junction)
  return false;
#undef DO_
}

void Junction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Junction)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_ids(i), output);
  }

  // required .hdmap_proto.Polygon polygon = 4;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->polygon(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Junction)
}

::google::protobuf::uint8* Junction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Junction)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_ids = 2;
  for (int i = 0; i < this->tile_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_ids(i), target);
  }

  // required .hdmap_proto.Polygon polygon = 4;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->polygon(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Junction)
  return target;
}

int Junction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon polygon = 4;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

  }
  // repeated .hdmap_proto.Id tile_ids = 2;
  total_size += 1 * this->tile_ids_size();
  for (int i = 0; i < this->tile_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_ids(i));
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Junction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Junction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Junction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Junction::MergeFrom(const Junction& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_ids_.MergeFrom(from.tile_ids_);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_polygon()) {
      mutable_polygon()->::hdmap_proto::Polygon::MergeFrom(from.polygon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Junction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junction::CopyFrom(const Junction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_ids())) return false;
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void Junction::Swap(Junction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_ids_.Swap(&other->tile_ids_);
    std::swap(polygon_, other->polygon_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Junction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Junction_descriptor_;
  metadata.reflection = Junction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

// @@protoc_insertion_point(global_scope)
