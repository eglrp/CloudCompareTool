// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_light.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic_light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

namespace {

const ::google::protobuf::Descriptor* TrafficLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLight_reflection_ = NULL;
struct TrafficLightOneofInstance {
  const ::hdmap_proto::Circle* cborder_;
  const ::hdmap_proto::Polygon* pborder_;
}* TrafficLight_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_TrafficLightType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrafficLight_TrafficLightState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_traffic_5flight_2eproto() {
  protobuf_AddDesc_traffic_5flight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "traffic_light.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficLight_descriptor_ = file->message_type(0);
  static const int TrafficLight_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficLight_default_oneof_instance_, cborder_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TrafficLight_default_oneof_instance_, pborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, link_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, geometry_),
  };
  TrafficLight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficLight_descriptor_,
      TrafficLight::default_instance_,
      TrafficLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _unknown_fields_),
      -1,
      TrafficLight_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficLight));
  TrafficLight_TrafficLightType_descriptor_ = TrafficLight_descriptor_->enum_type(0);
  TrafficLight_TrafficLightState_descriptor_ = TrafficLight_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_traffic_5flight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficLight_descriptor_, &TrafficLight::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_traffic_5flight_2eproto() {
  delete TrafficLight::default_instance_;
  delete TrafficLight_default_oneof_instance_;
  delete TrafficLight_reflection_;
}

void protobuf_AddDesc_traffic_5flight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hdmap_proto::protobuf_AddDesc_id_2eproto();
  ::hdmap_proto::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023traffic_light.proto\022\013hdmap_proto\032\010id.p"
    "roto\032\016geometry.proto\"\366\003\n\014TrafficLight\022\033\n"
    "\002id\030\001 \002(\0132\017.hdmap_proto.Id\022 \n\007tile_id\030\002 "
    "\003(\0132\017.hdmap_proto.Id\0228\n\004type\030\003 \001(\0162*.hdm"
    "ap_proto.TrafficLight.TrafficLightType\022&"
    "\n\007cborder\030\004 \001(\0132\023.hdmap_proto.CircleH\000\022\'"
    "\n\007pborder\030\005 \001(\0132\024.hdmap_proto.PolygonH\000\022"
    ":\n\005state\030\006 \001(\0162+.hdmap_proto.TrafficLigh"
    "t.TrafficLightState\022!\n\010link_ids\030\007 \003(\0132\017."
    "hdmap_proto.Id\"e\n\020TrafficLightType\022\010\n\004NO"
    "NE\020\000\022\n\n\006CIRCLE\020\001\022\t\n\005CROSS\020\002\022\016\n\nPEDESTRIA"
    "N\020\003\022\013\n\007BICYCLE\020\004\022\t\n\005ARROW\020\005\022\010\n\004TIME\020\006\"J\n"
    "\021TrafficLightState\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001"
    "\022\t\n\005GREEN\020\002\022\010\n\004BLUE\020\003\022\n\n\006YELLOW\020\004B\n\n\010geo"
    "metry", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic_light.proto", &protobuf_RegisterTypes);
  TrafficLight::default_instance_ = new TrafficLight();
  TrafficLight_default_oneof_instance_ = new TrafficLightOneofInstance;
  TrafficLight::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_traffic_5flight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_traffic_5flight_2eproto {
  StaticDescriptorInitializer_traffic_5flight_2eproto() {
    protobuf_AddDesc_traffic_5flight_2eproto();
  }
} static_descriptor_initializer_traffic_5flight_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrafficLight_TrafficLightType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_TrafficLightType_descriptor_;
}
bool TrafficLight_TrafficLightType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TrafficLight_TrafficLightType TrafficLight::NONE;
const TrafficLight_TrafficLightType TrafficLight::CIRCLE;
const TrafficLight_TrafficLightType TrafficLight::CROSS;
const TrafficLight_TrafficLightType TrafficLight::PEDESTRIAN;
const TrafficLight_TrafficLightType TrafficLight::BICYCLE;
const TrafficLight_TrafficLightType TrafficLight::ARROW;
const TrafficLight_TrafficLightType TrafficLight::TIME;
const TrafficLight_TrafficLightType TrafficLight::TrafficLightType_MIN;
const TrafficLight_TrafficLightType TrafficLight::TrafficLightType_MAX;
const int TrafficLight::TrafficLightType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TrafficLight_TrafficLightState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_TrafficLightState_descriptor_;
}
bool TrafficLight_TrafficLightState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TrafficLight_TrafficLightState TrafficLight::UNKNOWN;
const TrafficLight_TrafficLightState TrafficLight::RED;
const TrafficLight_TrafficLightState TrafficLight::GREEN;
const TrafficLight_TrafficLightState TrafficLight::BLUE;
const TrafficLight_TrafficLightState TrafficLight::YELLOW;
const TrafficLight_TrafficLightState TrafficLight::TrafficLightState_MIN;
const TrafficLight_TrafficLightState TrafficLight::TrafficLightState_MAX;
const int TrafficLight::TrafficLightState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kTileIdFieldNumber;
const int TrafficLight::kTypeFieldNumber;
const int TrafficLight::kCborderFieldNumber;
const int TrafficLight::kPborderFieldNumber;
const int TrafficLight::kStateFieldNumber;
const int TrafficLight::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

TrafficLight::TrafficLight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.TrafficLight)
}

void TrafficLight::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  TrafficLight_default_oneof_instance_->cborder_ = const_cast< ::hdmap_proto::Circle*>(&::hdmap_proto::Circle::default_instance());
  TrafficLight_default_oneof_instance_->pborder_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.TrafficLight)
}

void TrafficLight::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  type_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_geometry();
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:hdmap_proto.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  if (has_geometry()) {
    clear_geometry();
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLight_descriptor_;
}

const TrafficLight& TrafficLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_5flight_2eproto();
  return *default_instance_;
}

TrafficLight* TrafficLight::default_instance_ = NULL;

TrafficLight* TrafficLight::New() const {
  return new TrafficLight;
}

void TrafficLight::clear_geometry() {
  switch(geometry_case()) {
    case kCborder: {
      delete geometry_.cborder_;
      break;
    }
    case kPborder: {
      delete geometry_.pborder_;
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void TrafficLight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrafficLight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 37) {
    ZR_(type_, state_);
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tile_id_.Clear();
  link_ids_.Clear();
  clear_geometry();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_id;
        break;
      }

      // repeated .hdmap_proto.Id tile_id = 2;
      case 2: {
        if (tag == 18) {
         parse_tile_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_id;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .hdmap_proto.TrafficLight.TrafficLightType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hdmap_proto::TrafficLight_TrafficLightType_IsValid(value)) {
            set_type(static_cast< ::hdmap_proto::TrafficLight_TrafficLightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cborder;
        break;
      }

      // optional .hdmap_proto.Circle cborder = 4;
      case 4: {
        if (tag == 34) {
         parse_cborder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cborder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pborder;
        break;
      }

      // optional .hdmap_proto.Polygon pborder = 5;
      case 5: {
        if (tag == 42) {
         parse_pborder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pborder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .hdmap_proto.TrafficLight.TrafficLightState state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hdmap_proto::TrafficLight_TrafficLightState_IsValid(value)) {
            set_state(static_cast< ::hdmap_proto::TrafficLight_TrafficLightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 7;
      case 7: {
        if (tag == 58) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.TrafficLight)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .hdmap_proto.Id tile_id = 2;
  for (int i = 0; i < this->tile_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile_id(i), output);
  }

  // optional .hdmap_proto.TrafficLight.TrafficLightType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .hdmap_proto.Circle cborder = 4;
  if (has_cborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cborder(), output);
  }

  // optional .hdmap_proto.Polygon pborder = 5;
  if (has_pborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pborder(), output);
  }

  // optional .hdmap_proto.TrafficLight.TrafficLightState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 7;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.TrafficLight)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .hdmap_proto.Id tile_id = 2;
  for (int i = 0; i < this->tile_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile_id(i), target);
  }

  // optional .hdmap_proto.TrafficLight.TrafficLightType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .hdmap_proto.Circle cborder = 4;
  if (has_cborder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cborder(), target);
  }

  // optional .hdmap_proto.Polygon pborder = 5;
  if (has_pborder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pborder(), target);
  }

  // optional .hdmap_proto.TrafficLight.TrafficLightState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 7;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.TrafficLight)
  return target;
}

int TrafficLight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .hdmap_proto.TrafficLight.TrafficLightType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .hdmap_proto.TrafficLight.TrafficLightState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .hdmap_proto.Id tile_id = 2;
  total_size += 1 * this->tile_id_size();
  for (int i = 0; i < this->tile_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile_id(i));
  }

  // repeated .hdmap_proto.Id link_ids = 7;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  switch (geometry_case()) {
    // optional .hdmap_proto.Circle cborder = 4;
    case kCborder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cborder());
      break;
    }
    // optional .hdmap_proto.Polygon pborder = 5;
    case kPborder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pborder());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficLight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficLight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_id_.MergeFrom(from.tile_id_);
  link_ids_.MergeFrom(from.link_ids_);
  switch (from.geometry_case()) {
    case kCborder: {
      mutable_cborder()->::hdmap_proto::Circle::MergeFrom(from.cborder());
      break;
    }
    case kPborder: {
      mutable_pborder()->::hdmap_proto::Polygon::MergeFrom(from.pborder());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tile_id())) return false;
  if (has_cborder()) {
    if (!this->cborder().IsInitialized()) return false;
  }
  if (has_pborder()) {
    if (!this->pborder().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tile_id_.Swap(&other->tile_id_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(geometry_, other->geometry_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLight_descriptor_;
  metadata.reflection = TrafficLight_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

// @@protoc_insertion_point(global_scope)
