// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_space.proto

#ifndef PROTOBUF_parking_5fspace_2eproto__INCLUDED
#define PROTOBUF_parking_5fspace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
#include "object.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_parking_5fspace_2eproto();
void protobuf_AssignDesc_parking_5fspace_2eproto();
void protobuf_ShutdownFile_parking_5fspace_2eproto();

class ParkingSpace;

// ===================================================================

class ParkingSpace : public ::google::protobuf::Message {
 public:
  ParkingSpace();
  virtual ~ParkingSpace();

  ParkingSpace(const ParkingSpace& from);

  inline ParkingSpace& operator=(const ParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSpace& default_instance();

  void Swap(ParkingSpace* other);

  // implements Message ----------------------------------------------

  ParkingSpace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParkingSpace& from);
  void MergeFrom(const ParkingSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // repeated .hdmap_proto.ParkingSlot parking_slots = 4;
  inline int parking_slots_size() const;
  inline void clear_parking_slots();
  static const int kParkingSlotsFieldNumber = 4;
  inline const ::hdmap_proto::ParkingSlot& parking_slots(int index) const;
  inline ::hdmap_proto::ParkingSlot* mutable_parking_slots(int index);
  inline ::hdmap_proto::ParkingSlot* add_parking_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >&
      parking_slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >*
      mutable_parking_slots();

  // repeated .hdmap_proto.Id link_ids = 5;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 5;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.ParkingSpace)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot > parking_slots_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  friend void  protobuf_AddDesc_parking_5fspace_2eproto();
  friend void protobuf_AssignDesc_parking_5fspace_2eproto();
  friend void protobuf_ShutdownFile_parking_5fspace_2eproto();

  void InitAsDefaultInstance();
  static ParkingSpace* default_instance_;
};
// ===================================================================


// ===================================================================

// ParkingSpace

// required .hdmap_proto.Id id = 1;
inline bool ParkingSpace::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkingSpace::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkingSpace::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkingSpace::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& ParkingSpace::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* ParkingSpace::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.id)
  return id_;
}
inline ::hdmap_proto::Id* ParkingSpace::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ParkingSpace::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.ParkingSpace.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int ParkingSpace::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ParkingSpace::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& ParkingSpace::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* ParkingSpace::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* ParkingSpace::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
ParkingSpace::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
ParkingSpace::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.ParkingSpace.tile_ids)
  return &tile_ids_;
}

// repeated .hdmap_proto.ParkingSlot parking_slots = 4;
inline int ParkingSpace::parking_slots_size() const {
  return parking_slots_.size();
}
inline void ParkingSpace::clear_parking_slots() {
  parking_slots_.Clear();
}
inline const ::hdmap_proto::ParkingSlot& ParkingSpace::parking_slots(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.parking_slots)
  return parking_slots_.Get(index);
}
inline ::hdmap_proto::ParkingSlot* ParkingSpace::mutable_parking_slots(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.parking_slots)
  return parking_slots_.Mutable(index);
}
inline ::hdmap_proto::ParkingSlot* ParkingSpace::add_parking_slots() {
  // @@protoc_insertion_point(field_add:hdmap_proto.ParkingSpace.parking_slots)
  return parking_slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >&
ParkingSpace::parking_slots() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.ParkingSpace.parking_slots)
  return parking_slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >*
ParkingSpace::mutable_parking_slots() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.ParkingSpace.parking_slots)
  return &parking_slots_;
}

// repeated .hdmap_proto.Id link_ids = 5;
inline int ParkingSpace::link_ids_size() const {
  return link_ids_.size();
}
inline void ParkingSpace::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& ParkingSpace::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* ParkingSpace::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* ParkingSpace::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
ParkingSpace::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
ParkingSpace::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.ParkingSpace.link_ids)
  return &link_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parking_5fspace_2eproto__INCLUDED
