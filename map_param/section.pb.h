// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: section.proto

#ifndef PROTOBUF_section_2eproto__INCLUDED
#define PROTOBUF_section_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
#include "attribute.pb.h"
#include "object.pb.h"
#include "lane_marking.pb.h"
#include "traffic_sign.pb.h"
#include "traffic_light.pb.h"
#include "lane.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_section_2eproto();
void protobuf_AssignDesc_section_2eproto();
void protobuf_ShutdownFile_section_2eproto();

class Section;

// ===================================================================

class Section : public ::google::protobuf::Message {
 public:
  Section();
  virtual ~Section();

  Section(const Section& from);

  inline Section& operator=(const Section& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Section& default_instance();

  void Swap(Section* other);

  // implements Message ----------------------------------------------

  Section* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Section& from);
  void MergeFrom(const Section& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // repeated .hdmap_proto.Lane refline = 3;
  inline int refline_size() const;
  inline void clear_refline();
  static const int kReflineFieldNumber = 3;
  inline const ::hdmap_proto::Lane& refline(int index) const;
  inline ::hdmap_proto::Lane* mutable_refline(int index);
  inline ::hdmap_proto::Lane* add_refline();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >&
      refline() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >*
      mutable_refline();

  // repeated .hdmap_proto.Lane lanes = 4;
  inline int lanes_size() const;
  inline void clear_lanes();
  static const int kLanesFieldNumber = 4;
  inline const ::hdmap_proto::Lane& lanes(int index) const;
  inline ::hdmap_proto::Lane* mutable_lanes(int index);
  inline ::hdmap_proto::Lane* add_lanes();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >&
      lanes() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >*
      mutable_lanes();

  // repeated .hdmap_proto.StopLine stoplines = 5;
  inline int stoplines_size() const;
  inline void clear_stoplines();
  static const int kStoplinesFieldNumber = 5;
  inline const ::hdmap_proto::StopLine& stoplines(int index) const;
  inline ::hdmap_proto::StopLine* mutable_stoplines(int index);
  inline ::hdmap_proto::StopLine* add_stoplines();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::StopLine >&
      stoplines() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::StopLine >*
      mutable_stoplines();

  // repeated .hdmap_proto.SpeedBump speedbumps = 6;
  inline int speedbumps_size() const;
  inline void clear_speedbumps();
  static const int kSpeedbumpsFieldNumber = 6;
  inline const ::hdmap_proto::SpeedBump& speedbumps(int index) const;
  inline ::hdmap_proto::SpeedBump* mutable_speedbumps(int index);
  inline ::hdmap_proto::SpeedBump* add_speedbumps();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::SpeedBump >&
      speedbumps() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::SpeedBump >*
      mutable_speedbumps();

  // repeated .hdmap_proto.Pole poles = 7;
  inline int poles_size() const;
  inline void clear_poles();
  static const int kPolesFieldNumber = 7;
  inline const ::hdmap_proto::Pole& poles(int index) const;
  inline ::hdmap_proto::Pole* mutable_poles(int index);
  inline ::hdmap_proto::Pole* add_poles();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Pole >&
      poles() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Pole >*
      mutable_poles();

  // repeated .hdmap_proto.Board boards = 8;
  inline int boards_size() const;
  inline void clear_boards();
  static const int kBoardsFieldNumber = 8;
  inline const ::hdmap_proto::Board& boards(int index) const;
  inline ::hdmap_proto::Board* mutable_boards(int index);
  inline ::hdmap_proto::Board* add_boards();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Board >&
      boards() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Board >*
      mutable_boards();

  // repeated .hdmap_proto.Zone zones = 9;
  inline int zones_size() const;
  inline void clear_zones();
  static const int kZonesFieldNumber = 9;
  inline const ::hdmap_proto::Zone& zones(int index) const;
  inline ::hdmap_proto::Zone* mutable_zones(int index);
  inline ::hdmap_proto::Zone* add_zones();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Zone >&
      zones() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Zone >*
      mutable_zones();

  // repeated .hdmap_proto.LaneMarking lane_markings = 10;
  inline int lane_markings_size() const;
  inline void clear_lane_markings();
  static const int kLaneMarkingsFieldNumber = 10;
  inline const ::hdmap_proto::LaneMarking& lane_markings(int index) const;
  inline ::hdmap_proto::LaneMarking* mutable_lane_markings(int index);
  inline ::hdmap_proto::LaneMarking* add_lane_markings();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >&
      lane_markings() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >*
      mutable_lane_markings();

  // repeated .hdmap_proto.TrafficLight traffic_lights = 11;
  inline int traffic_lights_size() const;
  inline void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 11;
  inline const ::hdmap_proto::TrafficLight& traffic_lights(int index) const;
  inline ::hdmap_proto::TrafficLight* mutable_traffic_lights(int index);
  inline ::hdmap_proto::TrafficLight* add_traffic_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >&
      traffic_lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >*
      mutable_traffic_lights();

  // repeated .hdmap_proto.TrafficSign traffic_signs = 12;
  inline int traffic_signs_size() const;
  inline void clear_traffic_signs();
  static const int kTrafficSignsFieldNumber = 12;
  inline const ::hdmap_proto::TrafficSign& traffic_signs(int index) const;
  inline ::hdmap_proto::TrafficSign* mutable_traffic_signs(int index);
  inline ::hdmap_proto::TrafficSign* add_traffic_signs();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >&
      traffic_signs() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >*
      mutable_traffic_signs();

  // repeated uint64 pred_ids = 13;
  inline int pred_ids_size() const;
  inline void clear_pred_ids();
  static const int kPredIdsFieldNumber = 13;
  inline ::google::protobuf::uint64 pred_ids(int index) const;
  inline void set_pred_ids(int index, ::google::protobuf::uint64 value);
  inline void add_pred_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pred_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pred_ids();

  // repeated uint64 succ_ids = 14;
  inline int succ_ids_size() const;
  inline void clear_succ_ids();
  static const int kSuccIdsFieldNumber = 14;
  inline ::google::protobuf::uint64 succ_ids(int index) const;
  inline void set_succ_ids(int index, ::google::protobuf::uint64 value);
  inline void add_succ_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      succ_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_succ_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.Section)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane > refline_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane > lanes_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::StopLine > stoplines_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::SpeedBump > speedbumps_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Pole > poles_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Board > boards_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Zone > zones_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking > lane_markings_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight > traffic_lights_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign > traffic_signs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pred_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > succ_ids_;
  friend void  protobuf_AddDesc_section_2eproto();
  friend void protobuf_AssignDesc_section_2eproto();
  friend void protobuf_ShutdownFile_section_2eproto();

  void InitAsDefaultInstance();
  static Section* default_instance_;
};
// ===================================================================


// ===================================================================

// Section

// required .hdmap_proto.Id id = 1;
inline bool Section::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Section::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Section::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Section::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Section::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Section::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.id)
  return id_;
}
inline ::hdmap_proto::Id* Section::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Section::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Section.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int Section::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Section::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& Section::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* Section::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Section::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Section::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Section::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.tile_ids)
  return &tile_ids_;
}

// repeated .hdmap_proto.Lane refline = 3;
inline int Section::refline_size() const {
  return refline_.size();
}
inline void Section::clear_refline() {
  refline_.Clear();
}
inline const ::hdmap_proto::Lane& Section::refline(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.refline)
  return refline_.Get(index);
}
inline ::hdmap_proto::Lane* Section::mutable_refline(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.refline)
  return refline_.Mutable(index);
}
inline ::hdmap_proto::Lane* Section::add_refline() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.refline)
  return refline_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >&
Section::refline() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.refline)
  return refline_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >*
Section::mutable_refline() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.refline)
  return &refline_;
}

// repeated .hdmap_proto.Lane lanes = 4;
inline int Section::lanes_size() const {
  return lanes_.size();
}
inline void Section::clear_lanes() {
  lanes_.Clear();
}
inline const ::hdmap_proto::Lane& Section::lanes(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.lanes)
  return lanes_.Get(index);
}
inline ::hdmap_proto::Lane* Section::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.lanes)
  return lanes_.Mutable(index);
}
inline ::hdmap_proto::Lane* Section::add_lanes() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.lanes)
  return lanes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >&
Section::lanes() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.lanes)
  return lanes_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Lane >*
Section::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.lanes)
  return &lanes_;
}

// repeated .hdmap_proto.StopLine stoplines = 5;
inline int Section::stoplines_size() const {
  return stoplines_.size();
}
inline void Section::clear_stoplines() {
  stoplines_.Clear();
}
inline const ::hdmap_proto::StopLine& Section::stoplines(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.stoplines)
  return stoplines_.Get(index);
}
inline ::hdmap_proto::StopLine* Section::mutable_stoplines(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.stoplines)
  return stoplines_.Mutable(index);
}
inline ::hdmap_proto::StopLine* Section::add_stoplines() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.stoplines)
  return stoplines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::StopLine >&
Section::stoplines() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.stoplines)
  return stoplines_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::StopLine >*
Section::mutable_stoplines() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.stoplines)
  return &stoplines_;
}

// repeated .hdmap_proto.SpeedBump speedbumps = 6;
inline int Section::speedbumps_size() const {
  return speedbumps_.size();
}
inline void Section::clear_speedbumps() {
  speedbumps_.Clear();
}
inline const ::hdmap_proto::SpeedBump& Section::speedbumps(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.speedbumps)
  return speedbumps_.Get(index);
}
inline ::hdmap_proto::SpeedBump* Section::mutable_speedbumps(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.speedbumps)
  return speedbumps_.Mutable(index);
}
inline ::hdmap_proto::SpeedBump* Section::add_speedbumps() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.speedbumps)
  return speedbumps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::SpeedBump >&
Section::speedbumps() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.speedbumps)
  return speedbumps_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::SpeedBump >*
Section::mutable_speedbumps() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.speedbumps)
  return &speedbumps_;
}

// repeated .hdmap_proto.Pole poles = 7;
inline int Section::poles_size() const {
  return poles_.size();
}
inline void Section::clear_poles() {
  poles_.Clear();
}
inline const ::hdmap_proto::Pole& Section::poles(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.poles)
  return poles_.Get(index);
}
inline ::hdmap_proto::Pole* Section::mutable_poles(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.poles)
  return poles_.Mutable(index);
}
inline ::hdmap_proto::Pole* Section::add_poles() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.poles)
  return poles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Pole >&
Section::poles() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.poles)
  return poles_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Pole >*
Section::mutable_poles() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.poles)
  return &poles_;
}

// repeated .hdmap_proto.Board boards = 8;
inline int Section::boards_size() const {
  return boards_.size();
}
inline void Section::clear_boards() {
  boards_.Clear();
}
inline const ::hdmap_proto::Board& Section::boards(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.boards)
  return boards_.Get(index);
}
inline ::hdmap_proto::Board* Section::mutable_boards(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.boards)
  return boards_.Mutable(index);
}
inline ::hdmap_proto::Board* Section::add_boards() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.boards)
  return boards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Board >&
Section::boards() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.boards)
  return boards_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Board >*
Section::mutable_boards() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.boards)
  return &boards_;
}

// repeated .hdmap_proto.Zone zones = 9;
inline int Section::zones_size() const {
  return zones_.size();
}
inline void Section::clear_zones() {
  zones_.Clear();
}
inline const ::hdmap_proto::Zone& Section::zones(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.zones)
  return zones_.Get(index);
}
inline ::hdmap_proto::Zone* Section::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.zones)
  return zones_.Mutable(index);
}
inline ::hdmap_proto::Zone* Section::add_zones() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.zones)
  return zones_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Zone >&
Section::zones() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.zones)
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Zone >*
Section::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.zones)
  return &zones_;
}

// repeated .hdmap_proto.LaneMarking lane_markings = 10;
inline int Section::lane_markings_size() const {
  return lane_markings_.size();
}
inline void Section::clear_lane_markings() {
  lane_markings_.Clear();
}
inline const ::hdmap_proto::LaneMarking& Section::lane_markings(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.lane_markings)
  return lane_markings_.Get(index);
}
inline ::hdmap_proto::LaneMarking* Section::mutable_lane_markings(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.lane_markings)
  return lane_markings_.Mutable(index);
}
inline ::hdmap_proto::LaneMarking* Section::add_lane_markings() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.lane_markings)
  return lane_markings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >&
Section::lane_markings() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.lane_markings)
  return lane_markings_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >*
Section::mutable_lane_markings() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.lane_markings)
  return &lane_markings_;
}

// repeated .hdmap_proto.TrafficLight traffic_lights = 11;
inline int Section::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline void Section::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline const ::hdmap_proto::TrafficLight& Section::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::hdmap_proto::TrafficLight* Section::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::hdmap_proto::TrafficLight* Section::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >&
Section::traffic_lights() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.traffic_lights)
  return traffic_lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >*
Section::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.traffic_lights)
  return &traffic_lights_;
}

// repeated .hdmap_proto.TrafficSign traffic_signs = 12;
inline int Section::traffic_signs_size() const {
  return traffic_signs_.size();
}
inline void Section::clear_traffic_signs() {
  traffic_signs_.Clear();
}
inline const ::hdmap_proto::TrafficSign& Section::traffic_signs(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.traffic_signs)
  return traffic_signs_.Get(index);
}
inline ::hdmap_proto::TrafficSign* Section::mutable_traffic_signs(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Section.traffic_signs)
  return traffic_signs_.Mutable(index);
}
inline ::hdmap_proto::TrafficSign* Section::add_traffic_signs() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.traffic_signs)
  return traffic_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >&
Section::traffic_signs() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.traffic_signs)
  return traffic_signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >*
Section::mutable_traffic_signs() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.traffic_signs)
  return &traffic_signs_;
}

// repeated uint64 pred_ids = 13;
inline int Section::pred_ids_size() const {
  return pred_ids_.size();
}
inline void Section::clear_pred_ids() {
  pred_ids_.Clear();
}
inline ::google::protobuf::uint64 Section::pred_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.pred_ids)
  return pred_ids_.Get(index);
}
inline void Section::set_pred_ids(int index, ::google::protobuf::uint64 value) {
  pred_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:hdmap_proto.Section.pred_ids)
}
inline void Section::add_pred_ids(::google::protobuf::uint64 value) {
  pred_ids_.Add(value);
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.pred_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Section::pred_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.pred_ids)
  return pred_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Section::mutable_pred_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.pred_ids)
  return &pred_ids_;
}

// repeated uint64 succ_ids = 14;
inline int Section::succ_ids_size() const {
  return succ_ids_.size();
}
inline void Section::clear_succ_ids() {
  succ_ids_.Clear();
}
inline ::google::protobuf::uint64 Section::succ_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Section.succ_ids)
  return succ_ids_.Get(index);
}
inline void Section::set_succ_ids(int index, ::google::protobuf::uint64 value) {
  succ_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:hdmap_proto.Section.succ_ids)
}
inline void Section::add_succ_ids(::google::protobuf::uint64 value) {
  succ_ids_.Add(value);
  // @@protoc_insertion_point(field_add:hdmap_proto.Section.succ_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Section::succ_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Section.succ_ids)
  return succ_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Section::mutable_succ_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Section.succ_ids)
  return &succ_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_section_2eproto__INCLUDED
