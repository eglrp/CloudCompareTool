// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane.proto

#ifndef PROTOBUF_lane_2eproto__INCLUDED
#define PROTOBUF_lane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
#include "lane_marking.pb.h"
#include "traffic_light.pb.h"
#include "traffic_sign.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lane_2eproto();
void protobuf_AssignDesc_lane_2eproto();
void protobuf_ShutdownFile_lane_2eproto();

class Lane;

enum Lane_LaneFunction {
  Lane_LaneFunction_NONE = 0,
  Lane_LaneFunction_CITY_DRIVING = 1,
  Lane_LaneFunction_BIKING = 2,
  Lane_LaneFunction_SIDEWALK = 3,
  Lane_LaneFunction_PARKING = 4
};
bool Lane_LaneFunction_IsValid(int value);
const Lane_LaneFunction Lane_LaneFunction_LaneFunction_MIN = Lane_LaneFunction_NONE;
const Lane_LaneFunction Lane_LaneFunction_LaneFunction_MAX = Lane_LaneFunction_PARKING;
const int Lane_LaneFunction_LaneFunction_ARRAYSIZE = Lane_LaneFunction_LaneFunction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneFunction_descriptor();
inline const ::std::string& Lane_LaneFunction_Name(Lane_LaneFunction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneFunction_descriptor(), value);
}
inline bool Lane_LaneFunction_Parse(
    const ::std::string& name, Lane_LaneFunction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneFunction>(
    Lane_LaneFunction_descriptor(), name, value);
}
enum Lane_LaneDirection {
  Lane_LaneDirection_FORWARD = 1,
  Lane_LaneDirection_BACKWARD = 2,
  Lane_LaneDirection_BIDIRECTION = 3
};
bool Lane_LaneDirection_IsValid(int value);
const Lane_LaneDirection Lane_LaneDirection_LaneDirection_MIN = Lane_LaneDirection_FORWARD;
const Lane_LaneDirection Lane_LaneDirection_LaneDirection_MAX = Lane_LaneDirection_BIDIRECTION;
const int Lane_LaneDirection_LaneDirection_ARRAYSIZE = Lane_LaneDirection_LaneDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneDirection_descriptor();
inline const ::std::string& Lane_LaneDirection_Name(Lane_LaneDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneDirection_descriptor(), value);
}
inline bool Lane_LaneDirection_Parse(
    const ::std::string& name, Lane_LaneDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneDirection>(
    Lane_LaneDirection_descriptor(), name, value);
}
enum Lane_LaneStyle {
  Lane_LaneStyle_UNKNOWN = 0,
  Lane_LaneStyle_DOTTED_YELLOW_LINE = 1,
  Lane_LaneStyle_DOTTED_YELLOW_BLANK = 2,
  Lane_LaneStyle_DOTTED_WHITE_LINE = 3,
  Lane_LaneStyle_DOTTED_WHITE_BLANK = 4,
  Lane_LaneStyle_SOLID_YELLOW = 5,
  Lane_LaneStyle_SOLID_WHITE = 6,
  Lane_LaneStyle_DOUBLE_YELLOW = 7,
  Lane_LaneStyle_CURB = 8
};
bool Lane_LaneStyle_IsValid(int value);
const Lane_LaneStyle Lane_LaneStyle_LaneStyle_MIN = Lane_LaneStyle_UNKNOWN;
const Lane_LaneStyle Lane_LaneStyle_LaneStyle_MAX = Lane_LaneStyle_CURB;
const int Lane_LaneStyle_LaneStyle_ARRAYSIZE = Lane_LaneStyle_LaneStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneStyle_descriptor();
inline const ::std::string& Lane_LaneStyle_Name(Lane_LaneStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneStyle_descriptor(), value);
}
inline bool Lane_LaneStyle_Parse(
    const ::std::string& name, Lane_LaneStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneStyle>(
    Lane_LaneStyle_descriptor(), name, value);
}
// ===================================================================

class Lane : public ::google::protobuf::Message {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  void Swap(Lane* other);

  // implements Message ----------------------------------------------

  Lane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Lane_LaneFunction LaneFunction;
  static const LaneFunction NONE = Lane_LaneFunction_NONE;
  static const LaneFunction CITY_DRIVING = Lane_LaneFunction_CITY_DRIVING;
  static const LaneFunction BIKING = Lane_LaneFunction_BIKING;
  static const LaneFunction SIDEWALK = Lane_LaneFunction_SIDEWALK;
  static const LaneFunction PARKING = Lane_LaneFunction_PARKING;
  static inline bool LaneFunction_IsValid(int value) {
    return Lane_LaneFunction_IsValid(value);
  }
  static const LaneFunction LaneFunction_MIN =
    Lane_LaneFunction_LaneFunction_MIN;
  static const LaneFunction LaneFunction_MAX =
    Lane_LaneFunction_LaneFunction_MAX;
  static const int LaneFunction_ARRAYSIZE =
    Lane_LaneFunction_LaneFunction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneFunction_descriptor() {
    return Lane_LaneFunction_descriptor();
  }
  static inline const ::std::string& LaneFunction_Name(LaneFunction value) {
    return Lane_LaneFunction_Name(value);
  }
  static inline bool LaneFunction_Parse(const ::std::string& name,
      LaneFunction* value) {
    return Lane_LaneFunction_Parse(name, value);
  }

  typedef Lane_LaneDirection LaneDirection;
  static const LaneDirection FORWARD = Lane_LaneDirection_FORWARD;
  static const LaneDirection BACKWARD = Lane_LaneDirection_BACKWARD;
  static const LaneDirection BIDIRECTION = Lane_LaneDirection_BIDIRECTION;
  static inline bool LaneDirection_IsValid(int value) {
    return Lane_LaneDirection_IsValid(value);
  }
  static const LaneDirection LaneDirection_MIN =
    Lane_LaneDirection_LaneDirection_MIN;
  static const LaneDirection LaneDirection_MAX =
    Lane_LaneDirection_LaneDirection_MAX;
  static const int LaneDirection_ARRAYSIZE =
    Lane_LaneDirection_LaneDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneDirection_descriptor() {
    return Lane_LaneDirection_descriptor();
  }
  static inline const ::std::string& LaneDirection_Name(LaneDirection value) {
    return Lane_LaneDirection_Name(value);
  }
  static inline bool LaneDirection_Parse(const ::std::string& name,
      LaneDirection* value) {
    return Lane_LaneDirection_Parse(name, value);
  }

  typedef Lane_LaneStyle LaneStyle;
  static const LaneStyle UNKNOWN = Lane_LaneStyle_UNKNOWN;
  static const LaneStyle DOTTED_YELLOW_LINE = Lane_LaneStyle_DOTTED_YELLOW_LINE;
  static const LaneStyle DOTTED_YELLOW_BLANK = Lane_LaneStyle_DOTTED_YELLOW_BLANK;
  static const LaneStyle DOTTED_WHITE_LINE = Lane_LaneStyle_DOTTED_WHITE_LINE;
  static const LaneStyle DOTTED_WHITE_BLANK = Lane_LaneStyle_DOTTED_WHITE_BLANK;
  static const LaneStyle SOLID_YELLOW = Lane_LaneStyle_SOLID_YELLOW;
  static const LaneStyle SOLID_WHITE = Lane_LaneStyle_SOLID_WHITE;
  static const LaneStyle DOUBLE_YELLOW = Lane_LaneStyle_DOUBLE_YELLOW;
  static const LaneStyle CURB = Lane_LaneStyle_CURB;
  static inline bool LaneStyle_IsValid(int value) {
    return Lane_LaneStyle_IsValid(value);
  }
  static const LaneStyle LaneStyle_MIN =
    Lane_LaneStyle_LaneStyle_MIN;
  static const LaneStyle LaneStyle_MAX =
    Lane_LaneStyle_LaneStyle_MAX;
  static const int LaneStyle_ARRAYSIZE =
    Lane_LaneStyle_LaneStyle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneStyle_descriptor() {
    return Lane_LaneStyle_descriptor();
  }
  static inline const ::std::string& LaneStyle_Name(LaneStyle value) {
    return Lane_LaneStyle_Name(value);
  }
  static inline bool LaneStyle_Parse(const ::std::string& name,
      LaneStyle* value) {
    return Lane_LaneStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // optional .hdmap_proto.Lane.LaneFunction function = 4;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 4;
  inline ::hdmap_proto::Lane_LaneFunction function() const;
  inline void set_function(::hdmap_proto::Lane_LaneFunction value);

  // optional .hdmap_proto.Lane.LaneDirection direction = 5;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 5;
  inline ::hdmap_proto::Lane_LaneDirection direction() const;
  inline void set_direction(::hdmap_proto::Lane_LaneDirection value);

  // optional .hdmap_proto.Lane.LaneStyle style = 6;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 6;
  inline ::hdmap_proto::Lane_LaneStyle style() const;
  inline void set_style(::hdmap_proto::Lane_LaneStyle value);

  // repeated .hdmap_proto.CurveLine lines = 7;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 7;
  inline const ::hdmap_proto::CurveLine& lines(int index) const;
  inline ::hdmap_proto::CurveLine* mutable_lines(int index);
  inline ::hdmap_proto::CurveLine* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine >*
      mutable_lines();

  // repeated .hdmap_proto.LaneMarking lane_markings = 8;
  inline int lane_markings_size() const;
  inline void clear_lane_markings();
  static const int kLaneMarkingsFieldNumber = 8;
  inline const ::hdmap_proto::LaneMarking& lane_markings(int index) const;
  inline ::hdmap_proto::LaneMarking* mutable_lane_markings(int index);
  inline ::hdmap_proto::LaneMarking* add_lane_markings();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >&
      lane_markings() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >*
      mutable_lane_markings();

  // repeated .hdmap_proto.TrafficLight traffic_lights = 9;
  inline int traffic_lights_size() const;
  inline void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 9;
  inline const ::hdmap_proto::TrafficLight& traffic_lights(int index) const;
  inline ::hdmap_proto::TrafficLight* mutable_traffic_lights(int index);
  inline ::hdmap_proto::TrafficLight* add_traffic_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >&
      traffic_lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >*
      mutable_traffic_lights();

  // repeated .hdmap_proto.TrafficSign traffic_signs = 10;
  inline int traffic_signs_size() const;
  inline void clear_traffic_signs();
  static const int kTrafficSignsFieldNumber = 10;
  inline const ::hdmap_proto::TrafficSign& traffic_signs(int index) const;
  inline ::hdmap_proto::TrafficSign* mutable_traffic_signs(int index);
  inline ::hdmap_proto::TrafficSign* add_traffic_signs();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >&
      traffic_signs() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >*
      mutable_traffic_signs();

  // repeated uint32 pred_indices = 20;
  inline int pred_indices_size() const;
  inline void clear_pred_indices();
  static const int kPredIndicesFieldNumber = 20;
  inline ::google::protobuf::uint32 pred_indices(int index) const;
  inline void set_pred_indices(int index, ::google::protobuf::uint32 value);
  inline void add_pred_indices(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pred_indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pred_indices();

  // repeated uint32 succ_indices = 21;
  inline int succ_indices_size() const;
  inline void clear_succ_indices();
  static const int kSuccIndicesFieldNumber = 21;
  inline ::google::protobuf::uint32 succ_indices(int index) const;
  inline void set_succ_indices(int index, ::google::protobuf::uint32 value);
  inline void add_succ_indices(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      succ_indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_succ_indices();

  // @@protoc_insertion_point(class_scope:hdmap_proto.Lane)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_style();
  inline void clear_has_style();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  int function_;
  int direction_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine > lines_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking > lane_markings_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight > traffic_lights_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign > traffic_signs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pred_indices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > succ_indices_;
  int style_;
  friend void  protobuf_AddDesc_lane_2eproto();
  friend void protobuf_AssignDesc_lane_2eproto();
  friend void protobuf_ShutdownFile_lane_2eproto();

  void InitAsDefaultInstance();
  static Lane* default_instance_;
};
// ===================================================================


// ===================================================================

// Lane

// required .hdmap_proto.Id id = 1;
inline bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Lane::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.id)
  return id_;
}
inline ::hdmap_proto::Id* Lane::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Lane.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int Lane::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Lane::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& Lane::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* Lane::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Lane::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Lane::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Lane::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.tile_ids)
  return &tile_ids_;
}

// optional .hdmap_proto.Lane.LaneFunction function = 4;
inline bool Lane::has_function() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lane::set_has_function() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lane::clear_has_function() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lane::clear_function() {
  function_ = 0;
  clear_has_function();
}
inline ::hdmap_proto::Lane_LaneFunction Lane::function() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.function)
  return static_cast< ::hdmap_proto::Lane_LaneFunction >(function_);
}
inline void Lane::set_function(::hdmap_proto::Lane_LaneFunction value) {
  assert(::hdmap_proto::Lane_LaneFunction_IsValid(value));
  set_has_function();
  function_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Lane.function)
}

// optional .hdmap_proto.Lane.LaneDirection direction = 5;
inline bool Lane::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lane::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::hdmap_proto::Lane_LaneDirection Lane::direction() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.direction)
  return static_cast< ::hdmap_proto::Lane_LaneDirection >(direction_);
}
inline void Lane::set_direction(::hdmap_proto::Lane_LaneDirection value) {
  assert(::hdmap_proto::Lane_LaneDirection_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Lane.direction)
}

// optional .hdmap_proto.Lane.LaneStyle style = 6;
inline bool Lane::has_style() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lane::set_has_style() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lane::clear_has_style() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lane::clear_style() {
  style_ = 0;
  clear_has_style();
}
inline ::hdmap_proto::Lane_LaneStyle Lane::style() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.style)
  return static_cast< ::hdmap_proto::Lane_LaneStyle >(style_);
}
inline void Lane::set_style(::hdmap_proto::Lane_LaneStyle value) {
  assert(::hdmap_proto::Lane_LaneStyle_IsValid(value));
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Lane.style)
}

// repeated .hdmap_proto.CurveLine lines = 7;
inline int Lane::lines_size() const {
  return lines_.size();
}
inline void Lane::clear_lines() {
  lines_.Clear();
}
inline const ::hdmap_proto::CurveLine& Lane::lines(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.lines)
  return lines_.Get(index);
}
inline ::hdmap_proto::CurveLine* Lane::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.lines)
  return lines_.Mutable(index);
}
inline ::hdmap_proto::CurveLine* Lane::add_lines() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine >&
Lane::lines() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine >*
Lane::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.lines)
  return &lines_;
}

// repeated .hdmap_proto.LaneMarking lane_markings = 8;
inline int Lane::lane_markings_size() const {
  return lane_markings_.size();
}
inline void Lane::clear_lane_markings() {
  lane_markings_.Clear();
}
inline const ::hdmap_proto::LaneMarking& Lane::lane_markings(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.lane_markings)
  return lane_markings_.Get(index);
}
inline ::hdmap_proto::LaneMarking* Lane::mutable_lane_markings(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.lane_markings)
  return lane_markings_.Mutable(index);
}
inline ::hdmap_proto::LaneMarking* Lane::add_lane_markings() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.lane_markings)
  return lane_markings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >&
Lane::lane_markings() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.lane_markings)
  return lane_markings_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::LaneMarking >*
Lane::mutable_lane_markings() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.lane_markings)
  return &lane_markings_;
}

// repeated .hdmap_proto.TrafficLight traffic_lights = 9;
inline int Lane::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline void Lane::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline const ::hdmap_proto::TrafficLight& Lane::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::hdmap_proto::TrafficLight* Lane::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::hdmap_proto::TrafficLight* Lane::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >&
Lane::traffic_lights() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.traffic_lights)
  return traffic_lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficLight >*
Lane::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.traffic_lights)
  return &traffic_lights_;
}

// repeated .hdmap_proto.TrafficSign traffic_signs = 10;
inline int Lane::traffic_signs_size() const {
  return traffic_signs_.size();
}
inline void Lane::clear_traffic_signs() {
  traffic_signs_.Clear();
}
inline const ::hdmap_proto::TrafficSign& Lane::traffic_signs(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.traffic_signs)
  return traffic_signs_.Get(index);
}
inline ::hdmap_proto::TrafficSign* Lane::mutable_traffic_signs(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.traffic_signs)
  return traffic_signs_.Mutable(index);
}
inline ::hdmap_proto::TrafficSign* Lane::add_traffic_signs() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.traffic_signs)
  return traffic_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >&
Lane::traffic_signs() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.traffic_signs)
  return traffic_signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::TrafficSign >*
Lane::mutable_traffic_signs() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.traffic_signs)
  return &traffic_signs_;
}

// repeated uint32 pred_indices = 20;
inline int Lane::pred_indices_size() const {
  return pred_indices_.size();
}
inline void Lane::clear_pred_indices() {
  pred_indices_.Clear();
}
inline ::google::protobuf::uint32 Lane::pred_indices(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.pred_indices)
  return pred_indices_.Get(index);
}
inline void Lane::set_pred_indices(int index, ::google::protobuf::uint32 value) {
  pred_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:hdmap_proto.Lane.pred_indices)
}
inline void Lane::add_pred_indices(::google::protobuf::uint32 value) {
  pred_indices_.Add(value);
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.pred_indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Lane::pred_indices() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.pred_indices)
  return pred_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Lane::mutable_pred_indices() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.pred_indices)
  return &pred_indices_;
}

// repeated uint32 succ_indices = 21;
inline int Lane::succ_indices_size() const {
  return succ_indices_.size();
}
inline void Lane::clear_succ_indices() {
  succ_indices_.Clear();
}
inline ::google::protobuf::uint32 Lane::succ_indices(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.succ_indices)
  return succ_indices_.Get(index);
}
inline void Lane::set_succ_indices(int index, ::google::protobuf::uint32 value) {
  succ_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:hdmap_proto.Lane.succ_indices)
}
inline void Lane::add_succ_indices(::google::protobuf::uint32 value) {
  succ_indices_.Add(value);
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.succ_indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Lane::succ_indices() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.succ_indices)
  return succ_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Lane::mutable_succ_indices() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.succ_indices)
  return &succ_indices_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdmap_proto::Lane_LaneFunction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::Lane_LaneFunction>() {
  return ::hdmap_proto::Lane_LaneFunction_descriptor();
}
template <> struct is_proto_enum< ::hdmap_proto::Lane_LaneDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::Lane_LaneDirection>() {
  return ::hdmap_proto::Lane_LaneDirection_descriptor();
}
template <> struct is_proto_enum< ::hdmap_proto::Lane_LaneStyle> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::Lane_LaneStyle>() {
  return ::hdmap_proto::Lane_LaneStyle_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lane_2eproto__INCLUDED
