// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

namespace {

const ::google::protobuf::Descriptor* Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Tile_TileRange_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tile_2eproto() {
  protobuf_AddDesc_tile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tile.proto");
  GOOGLE_CHECK(file != NULL);
  Tile_descriptor_ = file->message_type(0);
  static const int Tile_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, tile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, min_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, childs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, crosswalk_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, junction_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, parkingspace_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, section_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, refline_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, lane_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, stopline_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, speedbump_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, pole_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, board_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, zone_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, lane_marking_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, traffic_light_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, traffic_sign_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, sections_ids_),
  };
  Tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_descriptor_,
      Tile::default_instance_,
      Tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile));
  Tile_TileRange_descriptor_ = Tile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_descriptor_, &Tile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tile_2eproto() {
  delete Tile::default_instance_;
  delete Tile_reflection_;
}

void protobuf_AddDesc_tile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hdmap_proto::protobuf_AddDesc_id_2eproto();
  ::hdmap_proto::protobuf_AddDesc_geometry_2eproto();
  ::hdmap_proto::protobuf_AddDesc_object_2eproto();
  ::hdmap_proto::protobuf_AddDesc_lane_5fmarking_2eproto();
  ::hdmap_proto::protobuf_AddDesc_traffic_5fsign_2eproto();
  ::hdmap_proto::protobuf_AddDesc_traffic_5flight_2eproto();
  ::hdmap_proto::protobuf_AddDesc_lane_2eproto();
  ::hdmap_proto::protobuf_AddDesc_section_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntile.proto\022\013hdmap_proto\032\010id.proto\032\016geo"
    "metry.proto\032\014object.proto\032\022lane_marking."
    "proto\032\022traffic_sign.proto\032\023traffic_light"
    ".proto\032\nlane.proto\032\rsection.proto\"\265\006\n\004Ti"
    "le\022 \n\007tile_id\030\001 \002(\0132\017.hdmap_proto.Id\022\035\n\003"
    "idx\030\002 \002(\0132\020.hdmap_proto.Idx\022%\n\tmin_point"
    "\030\004 \002(\0132\022.hdmap_proto.Point\022*\n\005range\030\005 \002("
    "\0162\033.hdmap_proto.Tile.TileRange\022\037\n\006childs"
    "\030\006 \003(\0132\017.hdmap_proto.Id\022&\n\rcrosswalk_ids"
    "\030\n \003(\0132\017.hdmap_proto.Id\022%\n\014junction_ids\030"
    "\013 \003(\0132\017.hdmap_proto.Id\022)\n\020parkingspace_i"
    "ds\030\014 \003(\0132\017.hdmap_proto.Id\022$\n\013section_ids"
    "\030\r \003(\0132\017.hdmap_proto.Id\022$\n\013refline_ids\030\016"
    " \003(\0132\017.hdmap_proto.Id\022!\n\010lane_ids\030\017 \003(\0132"
    "\017.hdmap_proto.Id\022%\n\014stopline_ids\030\020 \003(\0132\017"
    ".hdmap_proto.Id\022&\n\rspeedbump_ids\030\021 \003(\0132\017"
    ".hdmap_proto.Id\022!\n\010pole_ids\030\022 \003(\0132\017.hdma"
    "p_proto.Id\022\"\n\tboard_ids\030\023 \003(\0132\017.hdmap_pr"
    "oto.Id\022!\n\010zone_ids\030\024 \003(\0132\017.hdmap_proto.I"
    "d\022)\n\020lane_marking_ids\030\025 \003(\0132\017.hdmap_prot"
    "o.Id\022*\n\021traffic_light_ids\030\026 \003(\0132\017.hdmap_"
    "proto.Id\022)\n\020traffic_sign_ids\030\027 \003(\0132\017.hdm"
    "ap_proto.Id\022%\n\014sections_ids\030\030 \003(\0132\017.hdma"
    "p_proto.Id\"-\n\tTileRange\022\006\n\002T0\020(\022\006\n\002T1\020P\022"
    "\007\n\002T2\020\240\001\022\007\n\002T3\020\300\002", 977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tile.proto", &protobuf_RegisterTypes);
  Tile::default_instance_ = new Tile();
  Tile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tile_2eproto {
  StaticDescriptorInitializer_tile_2eproto() {
    protobuf_AddDesc_tile_2eproto();
  }
} static_descriptor_initializer_tile_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Tile_TileRange_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_TileRange_descriptor_;
}
bool Tile_TileRange_IsValid(int value) {
  switch(value) {
    case 40:
    case 80:
    case 160:
    case 320:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Tile_TileRange Tile::T0;
const Tile_TileRange Tile::T1;
const Tile_TileRange Tile::T2;
const Tile_TileRange Tile::T3;
const Tile_TileRange Tile::TileRange_MIN;
const Tile_TileRange Tile::TileRange_MAX;
const int Tile::TileRange_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Tile::kTileIdFieldNumber;
const int Tile::kIdxFieldNumber;
const int Tile::kMinPointFieldNumber;
const int Tile::kRangeFieldNumber;
const int Tile::kChildsFieldNumber;
const int Tile::kCrosswalkIdsFieldNumber;
const int Tile::kJunctionIdsFieldNumber;
const int Tile::kParkingspaceIdsFieldNumber;
const int Tile::kSectionIdsFieldNumber;
const int Tile::kReflineIdsFieldNumber;
const int Tile::kLaneIdsFieldNumber;
const int Tile::kStoplineIdsFieldNumber;
const int Tile::kSpeedbumpIdsFieldNumber;
const int Tile::kPoleIdsFieldNumber;
const int Tile::kBoardIdsFieldNumber;
const int Tile::kZoneIdsFieldNumber;
const int Tile::kLaneMarkingIdsFieldNumber;
const int Tile::kTrafficLightIdsFieldNumber;
const int Tile::kTrafficSignIdsFieldNumber;
const int Tile::kSectionsIdsFieldNumber;
#endif  // !_MSC_VER

Tile::Tile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Tile)
}

void Tile::InitAsDefaultInstance() {
  tile_id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  idx_ = const_cast< ::hdmap_proto::Idx*>(&::hdmap_proto::Idx::default_instance());
  min_point_ = const_cast< ::hdmap_proto::Point*>(&::hdmap_proto::Point::default_instance());
}

Tile::Tile(const Tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Tile)
}

void Tile::SharedCtor() {
  _cached_size_ = 0;
  tile_id_ = NULL;
  idx_ = NULL;
  min_point_ = NULL;
  range_ = 40;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Tile)
  SharedDtor();
}

void Tile::SharedDtor() {
  if (this != default_instance_) {
    delete tile_id_;
    delete idx_;
    delete min_point_;
  }
}

void Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_descriptor_;
}

const Tile& Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

Tile* Tile::default_instance_ = NULL;

Tile* Tile::New() const {
  return new Tile;
}

void Tile::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_tile_id()) {
      if (tile_id_ != NULL) tile_id_->::hdmap_proto::Id::Clear();
    }
    if (has_idx()) {
      if (idx_ != NULL) idx_->::hdmap_proto::Idx::Clear();
    }
    if (has_min_point()) {
      if (min_point_ != NULL) min_point_->::hdmap_proto::Point::Clear();
    }
    range_ = 40;
  }
  childs_.Clear();
  crosswalk_ids_.Clear();
  junction_ids_.Clear();
  parkingspace_ids_.Clear();
  section_ids_.Clear();
  refline_ids_.Clear();
  lane_ids_.Clear();
  stopline_ids_.Clear();
  speedbump_ids_.Clear();
  pole_ids_.Clear();
  board_ids_.Clear();
  zone_ids_.Clear();
  lane_marking_ids_.Clear();
  traffic_light_ids_.Clear();
  traffic_sign_ids_.Clear();
  sections_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Tile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id tile_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_idx;
        break;
      }

      // required .hdmap_proto.Idx idx = 2;
      case 2: {
        if (tag == 18) {
         parse_idx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_min_point;
        break;
      }

      // required .hdmap_proto.Point min_point = 4;
      case 4: {
        if (tag == 34) {
         parse_min_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_range;
        break;
      }

      // required .hdmap_proto.Tile.TileRange range = 5;
      case 5: {
        if (tag == 40) {
         parse_range:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hdmap_proto::Tile_TileRange_IsValid(value)) {
            set_range(static_cast< ::hdmap_proto::Tile_TileRange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_childs;
        break;
      }

      // repeated .hdmap_proto.Id childs = 6;
      case 6: {
        if (tag == 50) {
         parse_childs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_childs;
        if (input->ExpectTag(82)) goto parse_crosswalk_ids;
        break;
      }

      // repeated .hdmap_proto.Id crosswalk_ids = 10;
      case 10: {
        if (tag == 82) {
         parse_crosswalk_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosswalk_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_crosswalk_ids;
        if (input->ExpectTag(90)) goto parse_junction_ids;
        break;
      }

      // repeated .hdmap_proto.Id junction_ids = 11;
      case 11: {
        if (tag == 90) {
         parse_junction_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_junction_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_junction_ids;
        if (input->ExpectTag(98)) goto parse_parkingspace_ids;
        break;
      }

      // repeated .hdmap_proto.Id parkingspace_ids = 12;
      case 12: {
        if (tag == 98) {
         parse_parkingspace_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parkingspace_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_parkingspace_ids;
        if (input->ExpectTag(106)) goto parse_section_ids;
        break;
      }

      // repeated .hdmap_proto.Id section_ids = 13;
      case 13: {
        if (tag == 106) {
         parse_section_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_section_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_section_ids;
        if (input->ExpectTag(114)) goto parse_refline_ids;
        break;
      }

      // repeated .hdmap_proto.Id refline_ids = 14;
      case 14: {
        if (tag == 114) {
         parse_refline_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refline_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_refline_ids;
        if (input->ExpectTag(122)) goto parse_lane_ids;
        break;
      }

      // repeated .hdmap_proto.Id lane_ids = 15;
      case 15: {
        if (tag == 122) {
         parse_lane_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_lane_ids;
        if (input->ExpectTag(130)) goto parse_stopline_ids;
        break;
      }

      // repeated .hdmap_proto.Id stopline_ids = 16;
      case 16: {
        if (tag == 130) {
         parse_stopline_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stopline_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_stopline_ids;
        if (input->ExpectTag(138)) goto parse_speedbump_ids;
        break;
      }

      // repeated .hdmap_proto.Id speedbump_ids = 17;
      case 17: {
        if (tag == 138) {
         parse_speedbump_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speedbump_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_speedbump_ids;
        if (input->ExpectTag(146)) goto parse_pole_ids;
        break;
      }

      // repeated .hdmap_proto.Id pole_ids = 18;
      case 18: {
        if (tag == 146) {
         parse_pole_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pole_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_pole_ids;
        if (input->ExpectTag(154)) goto parse_board_ids;
        break;
      }

      // repeated .hdmap_proto.Id board_ids = 19;
      case 19: {
        if (tag == 154) {
         parse_board_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_board_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_board_ids;
        if (input->ExpectTag(162)) goto parse_zone_ids;
        break;
      }

      // repeated .hdmap_proto.Id zone_ids = 20;
      case 20: {
        if (tag == 162) {
         parse_zone_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zone_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_zone_ids;
        if (input->ExpectTag(170)) goto parse_lane_marking_ids;
        break;
      }

      // repeated .hdmap_proto.Id lane_marking_ids = 21;
      case 21: {
        if (tag == 170) {
         parse_lane_marking_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_marking_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_lane_marking_ids;
        if (input->ExpectTag(178)) goto parse_traffic_light_ids;
        break;
      }

      // repeated .hdmap_proto.Id traffic_light_ids = 22;
      case 22: {
        if (tag == 178) {
         parse_traffic_light_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_light_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_traffic_light_ids;
        if (input->ExpectTag(186)) goto parse_traffic_sign_ids;
        break;
      }

      // repeated .hdmap_proto.Id traffic_sign_ids = 23;
      case 23: {
        if (tag == 186) {
         parse_traffic_sign_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_sign_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_traffic_sign_ids;
        if (input->ExpectTag(194)) goto parse_sections_ids;
        break;
      }

      // repeated .hdmap_proto.Id sections_ids = 24;
      case 24: {
        if (tag == 194) {
         parse_sections_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sections_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_sections_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Tile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Tile)
  return false;
#undef DO_
}

void Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Tile)
  // required .hdmap_proto.Id tile_id = 1;
  if (has_tile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tile_id(), output);
  }

  // required .hdmap_proto.Idx idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->idx(), output);
  }

  // required .hdmap_proto.Point min_point = 4;
  if (has_min_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->min_point(), output);
  }

  // required .hdmap_proto.Tile.TileRange range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->range(), output);
  }

  // repeated .hdmap_proto.Id childs = 6;
  for (int i = 0; i < this->childs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->childs(i), output);
  }

  // repeated .hdmap_proto.Id crosswalk_ids = 10;
  for (int i = 0; i < this->crosswalk_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->crosswalk_ids(i), output);
  }

  // repeated .hdmap_proto.Id junction_ids = 11;
  for (int i = 0; i < this->junction_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->junction_ids(i), output);
  }

  // repeated .hdmap_proto.Id parkingspace_ids = 12;
  for (int i = 0; i < this->parkingspace_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->parkingspace_ids(i), output);
  }

  // repeated .hdmap_proto.Id section_ids = 13;
  for (int i = 0; i < this->section_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->section_ids(i), output);
  }

  // repeated .hdmap_proto.Id refline_ids = 14;
  for (int i = 0; i < this->refline_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->refline_ids(i), output);
  }

  // repeated .hdmap_proto.Id lane_ids = 15;
  for (int i = 0; i < this->lane_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->lane_ids(i), output);
  }

  // repeated .hdmap_proto.Id stopline_ids = 16;
  for (int i = 0; i < this->stopline_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->stopline_ids(i), output);
  }

  // repeated .hdmap_proto.Id speedbump_ids = 17;
  for (int i = 0; i < this->speedbump_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->speedbump_ids(i), output);
  }

  // repeated .hdmap_proto.Id pole_ids = 18;
  for (int i = 0; i < this->pole_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->pole_ids(i), output);
  }

  // repeated .hdmap_proto.Id board_ids = 19;
  for (int i = 0; i < this->board_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->board_ids(i), output);
  }

  // repeated .hdmap_proto.Id zone_ids = 20;
  for (int i = 0; i < this->zone_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->zone_ids(i), output);
  }

  // repeated .hdmap_proto.Id lane_marking_ids = 21;
  for (int i = 0; i < this->lane_marking_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->lane_marking_ids(i), output);
  }

  // repeated .hdmap_proto.Id traffic_light_ids = 22;
  for (int i = 0; i < this->traffic_light_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->traffic_light_ids(i), output);
  }

  // repeated .hdmap_proto.Id traffic_sign_ids = 23;
  for (int i = 0; i < this->traffic_sign_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->traffic_sign_ids(i), output);
  }

  // repeated .hdmap_proto.Id sections_ids = 24;
  for (int i = 0; i < this->sections_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->sections_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Tile)
}

::google::protobuf::uint8* Tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Tile)
  // required .hdmap_proto.Id tile_id = 1;
  if (has_tile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tile_id(), target);
  }

  // required .hdmap_proto.Idx idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->idx(), target);
  }

  // required .hdmap_proto.Point min_point = 4;
  if (has_min_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->min_point(), target);
  }

  // required .hdmap_proto.Tile.TileRange range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->range(), target);
  }

  // repeated .hdmap_proto.Id childs = 6;
  for (int i = 0; i < this->childs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->childs(i), target);
  }

  // repeated .hdmap_proto.Id crosswalk_ids = 10;
  for (int i = 0; i < this->crosswalk_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->crosswalk_ids(i), target);
  }

  // repeated .hdmap_proto.Id junction_ids = 11;
  for (int i = 0; i < this->junction_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->junction_ids(i), target);
  }

  // repeated .hdmap_proto.Id parkingspace_ids = 12;
  for (int i = 0; i < this->parkingspace_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->parkingspace_ids(i), target);
  }

  // repeated .hdmap_proto.Id section_ids = 13;
  for (int i = 0; i < this->section_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->section_ids(i), target);
  }

  // repeated .hdmap_proto.Id refline_ids = 14;
  for (int i = 0; i < this->refline_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->refline_ids(i), target);
  }

  // repeated .hdmap_proto.Id lane_ids = 15;
  for (int i = 0; i < this->lane_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->lane_ids(i), target);
  }

  // repeated .hdmap_proto.Id stopline_ids = 16;
  for (int i = 0; i < this->stopline_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->stopline_ids(i), target);
  }

  // repeated .hdmap_proto.Id speedbump_ids = 17;
  for (int i = 0; i < this->speedbump_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->speedbump_ids(i), target);
  }

  // repeated .hdmap_proto.Id pole_ids = 18;
  for (int i = 0; i < this->pole_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->pole_ids(i), target);
  }

  // repeated .hdmap_proto.Id board_ids = 19;
  for (int i = 0; i < this->board_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->board_ids(i), target);
  }

  // repeated .hdmap_proto.Id zone_ids = 20;
  for (int i = 0; i < this->zone_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->zone_ids(i), target);
  }

  // repeated .hdmap_proto.Id lane_marking_ids = 21;
  for (int i = 0; i < this->lane_marking_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->lane_marking_ids(i), target);
  }

  // repeated .hdmap_proto.Id traffic_light_ids = 22;
  for (int i = 0; i < this->traffic_light_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->traffic_light_ids(i), target);
  }

  // repeated .hdmap_proto.Id traffic_sign_ids = 23;
  for (int i = 0; i < this->traffic_sign_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->traffic_sign_ids(i), target);
  }

  // repeated .hdmap_proto.Id sections_ids = 24;
  for (int i = 0; i < this->sections_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->sections_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Tile)
  return target;
}

int Tile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id tile_id = 1;
    if (has_tile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tile_id());
    }

    // required .hdmap_proto.Idx idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idx());
    }

    // required .hdmap_proto.Point min_point = 4;
    if (has_min_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_point());
    }

    // required .hdmap_proto.Tile.TileRange range = 5;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->range());
    }

  }
  // repeated .hdmap_proto.Id childs = 6;
  total_size += 1 * this->childs_size();
  for (int i = 0; i < this->childs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childs(i));
  }

  // repeated .hdmap_proto.Id crosswalk_ids = 10;
  total_size += 1 * this->crosswalk_ids_size();
  for (int i = 0; i < this->crosswalk_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crosswalk_ids(i));
  }

  // repeated .hdmap_proto.Id junction_ids = 11;
  total_size += 1 * this->junction_ids_size();
  for (int i = 0; i < this->junction_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->junction_ids(i));
  }

  // repeated .hdmap_proto.Id parkingspace_ids = 12;
  total_size += 1 * this->parkingspace_ids_size();
  for (int i = 0; i < this->parkingspace_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parkingspace_ids(i));
  }

  // repeated .hdmap_proto.Id section_ids = 13;
  total_size += 1 * this->section_ids_size();
  for (int i = 0; i < this->section_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->section_ids(i));
  }

  // repeated .hdmap_proto.Id refline_ids = 14;
  total_size += 1 * this->refline_ids_size();
  for (int i = 0; i < this->refline_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refline_ids(i));
  }

  // repeated .hdmap_proto.Id lane_ids = 15;
  total_size += 1 * this->lane_ids_size();
  for (int i = 0; i < this->lane_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_ids(i));
  }

  // repeated .hdmap_proto.Id stopline_ids = 16;
  total_size += 2 * this->stopline_ids_size();
  for (int i = 0; i < this->stopline_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stopline_ids(i));
  }

  // repeated .hdmap_proto.Id speedbump_ids = 17;
  total_size += 2 * this->speedbump_ids_size();
  for (int i = 0; i < this->speedbump_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speedbump_ids(i));
  }

  // repeated .hdmap_proto.Id pole_ids = 18;
  total_size += 2 * this->pole_ids_size();
  for (int i = 0; i < this->pole_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pole_ids(i));
  }

  // repeated .hdmap_proto.Id board_ids = 19;
  total_size += 2 * this->board_ids_size();
  for (int i = 0; i < this->board_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->board_ids(i));
  }

  // repeated .hdmap_proto.Id zone_ids = 20;
  total_size += 2 * this->zone_ids_size();
  for (int i = 0; i < this->zone_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zone_ids(i));
  }

  // repeated .hdmap_proto.Id lane_marking_ids = 21;
  total_size += 2 * this->lane_marking_ids_size();
  for (int i = 0; i < this->lane_marking_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_marking_ids(i));
  }

  // repeated .hdmap_proto.Id traffic_light_ids = 22;
  total_size += 2 * this->traffic_light_ids_size();
  for (int i = 0; i < this->traffic_light_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_light_ids(i));
  }

  // repeated .hdmap_proto.Id traffic_sign_ids = 23;
  total_size += 2 * this->traffic_sign_ids_size();
  for (int i = 0; i < this->traffic_sign_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_sign_ids(i));
  }

  // repeated .hdmap_proto.Id sections_ids = 24;
  total_size += 2 * this->sections_ids_size();
  for (int i = 0; i < this->sections_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sections_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
  GOOGLE_CHECK_NE(&from, this);
  childs_.MergeFrom(from.childs_);
  crosswalk_ids_.MergeFrom(from.crosswalk_ids_);
  junction_ids_.MergeFrom(from.junction_ids_);
  parkingspace_ids_.MergeFrom(from.parkingspace_ids_);
  section_ids_.MergeFrom(from.section_ids_);
  refline_ids_.MergeFrom(from.refline_ids_);
  lane_ids_.MergeFrom(from.lane_ids_);
  stopline_ids_.MergeFrom(from.stopline_ids_);
  speedbump_ids_.MergeFrom(from.speedbump_ids_);
  pole_ids_.MergeFrom(from.pole_ids_);
  board_ids_.MergeFrom(from.board_ids_);
  zone_ids_.MergeFrom(from.zone_ids_);
  lane_marking_ids_.MergeFrom(from.lane_marking_ids_);
  traffic_light_ids_.MergeFrom(from.traffic_light_ids_);
  traffic_sign_ids_.MergeFrom(from.traffic_sign_ids_);
  sections_ids_.MergeFrom(from.sections_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tile_id()) {
      mutable_tile_id()->::hdmap_proto::Id::MergeFrom(from.tile_id());
    }
    if (from.has_idx()) {
      mutable_idx()->::hdmap_proto::Idx::MergeFrom(from.idx());
    }
    if (from.has_min_point()) {
      mutable_min_point()->::hdmap_proto::Point::MergeFrom(from.min_point());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_tile_id()) {
    if (!this->tile_id().IsInitialized()) return false;
  }
  if (has_idx()) {
    if (!this->idx().IsInitialized()) return false;
  }
  if (has_min_point()) {
    if (!this->min_point().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->childs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crosswalk_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->junction_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->parkingspace_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->section_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->refline_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lane_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stopline_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->speedbump_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pole_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->board_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->zone_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lane_marking_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_light_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_sign_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sections_ids())) return false;
  return true;
}

void Tile::Swap(Tile* other) {
  if (other != this) {
    std::swap(tile_id_, other->tile_id_);
    std::swap(idx_, other->idx_);
    std::swap(min_point_, other->min_point_);
    std::swap(range_, other->range_);
    childs_.Swap(&other->childs_);
    crosswalk_ids_.Swap(&other->crosswalk_ids_);
    junction_ids_.Swap(&other->junction_ids_);
    parkingspace_ids_.Swap(&other->parkingspace_ids_);
    section_ids_.Swap(&other->section_ids_);
    refline_ids_.Swap(&other->refline_ids_);
    lane_ids_.Swap(&other->lane_ids_);
    stopline_ids_.Swap(&other->stopline_ids_);
    speedbump_ids_.Swap(&other->speedbump_ids_);
    pole_ids_.Swap(&other->pole_ids_);
    board_ids_.Swap(&other->board_ids_);
    zone_ids_.Swap(&other->zone_ids_);
    lane_marking_ids_.Swap(&other->lane_marking_ids_);
    traffic_light_ids_.Swap(&other->traffic_light_ids_);
    traffic_sign_ids_.Swap(&other->traffic_sign_ids_);
    sections_ids_.Swap(&other->sections_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_descriptor_;
  metadata.reflection = Tile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

// @@protoc_insertion_point(global_scope)
