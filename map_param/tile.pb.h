// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile.proto

#ifndef PROTOBUF_tile_2eproto__INCLUDED
#define PROTOBUF_tile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
#include "object.pb.h"
#include "lane_marking.pb.h"
#include "traffic_sign.pb.h"
#include "traffic_light.pb.h"
#include "lane.pb.h"
#include "parking_space.pb.h"
#include "section.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tile_2eproto();
void protobuf_AssignDesc_tile_2eproto();
void protobuf_ShutdownFile_tile_2eproto();

class Tile;

enum Tile_TileRange {
  Tile_TileRange_T0 = 40,
  Tile_TileRange_T1 = 80,
  Tile_TileRange_T2 = 160,
  Tile_TileRange_T3 = 320
};
bool Tile_TileRange_IsValid(int value);
const Tile_TileRange Tile_TileRange_TileRange_MIN = Tile_TileRange_T0;
const Tile_TileRange Tile_TileRange_TileRange_MAX = Tile_TileRange_T3;
const int Tile_TileRange_TileRange_ARRAYSIZE = Tile_TileRange_TileRange_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tile_TileRange_descriptor();
inline const ::std::string& Tile_TileRange_Name(Tile_TileRange value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tile_TileRange_descriptor(), value);
}
inline bool Tile_TileRange_Parse(
    const ::std::string& name, Tile_TileRange* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tile_TileRange>(
    Tile_TileRange_descriptor(), name, value);
}
// ===================================================================

class Tile : public ::google::protobuf::Message {
 public:
  Tile();
  virtual ~Tile();

  Tile(const Tile& from);

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile& default_instance();

  void Swap(Tile* other);

  // implements Message ----------------------------------------------

  Tile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Tile_TileRange TileRange;
  static const TileRange T0 = Tile_TileRange_T0;
  static const TileRange T1 = Tile_TileRange_T1;
  static const TileRange T2 = Tile_TileRange_T2;
  static const TileRange T3 = Tile_TileRange_T3;
  static inline bool TileRange_IsValid(int value) {
    return Tile_TileRange_IsValid(value);
  }
  static const TileRange TileRange_MIN =
    Tile_TileRange_TileRange_MIN;
  static const TileRange TileRange_MAX =
    Tile_TileRange_TileRange_MAX;
  static const int TileRange_ARRAYSIZE =
    Tile_TileRange_TileRange_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TileRange_descriptor() {
    return Tile_TileRange_descriptor();
  }
  static inline const ::std::string& TileRange_Name(TileRange value) {
    return Tile_TileRange_Name(value);
  }
  static inline bool TileRange_Parse(const ::std::string& name,
      TileRange* value) {
    return Tile_TileRange_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // required .hdmap_proto.Idx idx = 2;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 2;
  inline const ::hdmap_proto::Idx& idx() const;
  inline ::hdmap_proto::Idx* mutable_idx();
  inline ::hdmap_proto::Idx* release_idx();
  inline void set_allocated_idx(::hdmap_proto::Idx* idx);

  // required .hdmap_proto.Vector3d min_point = 4;
  inline bool has_min_point() const;
  inline void clear_min_point();
  static const int kMinPointFieldNumber = 4;
  inline const ::hdmap_proto::Vector3d& min_point() const;
  inline ::hdmap_proto::Vector3d* mutable_min_point();
  inline ::hdmap_proto::Vector3d* release_min_point();
  inline void set_allocated_min_point(::hdmap_proto::Vector3d* min_point);

  // required .hdmap_proto.Tile.TileRange range = 5;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 5;
  inline ::hdmap_proto::Tile_TileRange range() const;
  inline void set_range(::hdmap_proto::Tile_TileRange value);

  // repeated .hdmap_proto.Id childs = 6;
  inline int childs_size() const;
  inline void clear_childs();
  static const int kChildsFieldNumber = 6;
  inline const ::hdmap_proto::Id& childs(int index) const;
  inline ::hdmap_proto::Id* mutable_childs(int index);
  inline ::hdmap_proto::Id* add_childs();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      childs() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_childs();

  // repeated .hdmap_proto.Id crosswalk_ids = 10;
  inline int crosswalk_ids_size() const;
  inline void clear_crosswalk_ids();
  static const int kCrosswalkIdsFieldNumber = 10;
  inline const ::hdmap_proto::Id& crosswalk_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_crosswalk_ids(int index);
  inline ::hdmap_proto::Id* add_crosswalk_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      crosswalk_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_crosswalk_ids();

  // repeated .hdmap_proto.Id junction_ids = 11;
  inline int junction_ids_size() const;
  inline void clear_junction_ids();
  static const int kJunctionIdsFieldNumber = 11;
  inline const ::hdmap_proto::Id& junction_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_junction_ids(int index);
  inline ::hdmap_proto::Id* add_junction_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      junction_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_junction_ids();

  // repeated .hdmap_proto.Id parkingspace_ids = 12;
  inline int parkingspace_ids_size() const;
  inline void clear_parkingspace_ids();
  static const int kParkingspaceIdsFieldNumber = 12;
  inline const ::hdmap_proto::Id& parkingspace_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_parkingspace_ids(int index);
  inline ::hdmap_proto::Id* add_parkingspace_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      parkingspace_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_parkingspace_ids();

  // repeated .hdmap_proto.Id section_ids = 13;
  inline int section_ids_size() const;
  inline void clear_section_ids();
  static const int kSectionIdsFieldNumber = 13;
  inline const ::hdmap_proto::Id& section_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_section_ids(int index);
  inline ::hdmap_proto::Id* add_section_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      section_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_section_ids();

  // repeated .hdmap_proto.Id refline_ids = 14;
  inline int refline_ids_size() const;
  inline void clear_refline_ids();
  static const int kReflineIdsFieldNumber = 14;
  inline const ::hdmap_proto::Id& refline_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_refline_ids(int index);
  inline ::hdmap_proto::Id* add_refline_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      refline_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_refline_ids();

  // repeated .hdmap_proto.Id lane_ids = 15;
  inline int lane_ids_size() const;
  inline void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 15;
  inline const ::hdmap_proto::Id& lane_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_lane_ids(int index);
  inline ::hdmap_proto::Id* add_lane_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      lane_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_lane_ids();

  // repeated .hdmap_proto.Id stopline_ids = 16;
  inline int stopline_ids_size() const;
  inline void clear_stopline_ids();
  static const int kStoplineIdsFieldNumber = 16;
  inline const ::hdmap_proto::Id& stopline_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_stopline_ids(int index);
  inline ::hdmap_proto::Id* add_stopline_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      stopline_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_stopline_ids();

  // repeated .hdmap_proto.Id speedbump_ids = 17;
  inline int speedbump_ids_size() const;
  inline void clear_speedbump_ids();
  static const int kSpeedbumpIdsFieldNumber = 17;
  inline const ::hdmap_proto::Id& speedbump_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_speedbump_ids(int index);
  inline ::hdmap_proto::Id* add_speedbump_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      speedbump_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_speedbump_ids();

  // repeated .hdmap_proto.Id pole_ids = 18;
  inline int pole_ids_size() const;
  inline void clear_pole_ids();
  static const int kPoleIdsFieldNumber = 18;
  inline const ::hdmap_proto::Id& pole_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_pole_ids(int index);
  inline ::hdmap_proto::Id* add_pole_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      pole_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_pole_ids();

  // repeated .hdmap_proto.Id board_ids = 19;
  inline int board_ids_size() const;
  inline void clear_board_ids();
  static const int kBoardIdsFieldNumber = 19;
  inline const ::hdmap_proto::Id& board_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_board_ids(int index);
  inline ::hdmap_proto::Id* add_board_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      board_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_board_ids();

  // repeated .hdmap_proto.Id zone_ids = 20;
  inline int zone_ids_size() const;
  inline void clear_zone_ids();
  static const int kZoneIdsFieldNumber = 20;
  inline const ::hdmap_proto::Id& zone_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_zone_ids(int index);
  inline ::hdmap_proto::Id* add_zone_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      zone_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_zone_ids();

  // repeated .hdmap_proto.Id lane_marking_ids = 21;
  inline int lane_marking_ids_size() const;
  inline void clear_lane_marking_ids();
  static const int kLaneMarkingIdsFieldNumber = 21;
  inline const ::hdmap_proto::Id& lane_marking_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_lane_marking_ids(int index);
  inline ::hdmap_proto::Id* add_lane_marking_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      lane_marking_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_lane_marking_ids();

  // repeated .hdmap_proto.Id traffic_light_ids = 22;
  inline int traffic_light_ids_size() const;
  inline void clear_traffic_light_ids();
  static const int kTrafficLightIdsFieldNumber = 22;
  inline const ::hdmap_proto::Id& traffic_light_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_traffic_light_ids(int index);
  inline ::hdmap_proto::Id* add_traffic_light_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      traffic_light_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_traffic_light_ids();

  // repeated .hdmap_proto.Id traffic_sign_ids = 23;
  inline int traffic_sign_ids_size() const;
  inline void clear_traffic_sign_ids();
  static const int kTrafficSignIdsFieldNumber = 23;
  inline const ::hdmap_proto::Id& traffic_sign_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_traffic_sign_ids(int index);
  inline ::hdmap_proto::Id* add_traffic_sign_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      traffic_sign_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_traffic_sign_ids();

  // repeated .hdmap_proto.Id parking_space_ids = 24;
  inline int parking_space_ids_size() const;
  inline void clear_parking_space_ids();
  static const int kParkingSpaceIdsFieldNumber = 24;
  inline const ::hdmap_proto::Id& parking_space_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_parking_space_ids(int index);
  inline ::hdmap_proto::Id* add_parking_space_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      parking_space_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_parking_space_ids();

  // repeated .hdmap_proto.Id sections_ids = 25;
  inline int sections_ids_size() const;
  inline void clear_sections_ids();
  static const int kSectionsIdsFieldNumber = 25;
  inline const ::hdmap_proto::Id& sections_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_sections_ids(int index);
  inline ::hdmap_proto::Id* add_sections_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      sections_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_sections_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.Tile)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_min_point();
  inline void clear_has_min_point();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::hdmap_proto::Idx* idx_;
  ::hdmap_proto::Vector3d* min_point_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > childs_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > crosswalk_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > junction_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > parkingspace_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > section_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > refline_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > stopline_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > speedbump_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > pole_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > board_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > zone_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > lane_marking_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > traffic_light_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > traffic_sign_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > parking_space_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > sections_ids_;
  int range_;
  friend void  protobuf_AddDesc_tile_2eproto();
  friend void protobuf_AssignDesc_tile_2eproto();
  friend void protobuf_ShutdownFile_tile_2eproto();

  void InitAsDefaultInstance();
  static Tile* default_instance_;
};
// ===================================================================


// ===================================================================

// Tile

// required .hdmap_proto.Id id = 1;
inline bool Tile::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tile::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tile::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tile::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Tile::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Tile::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.id)
  return id_;
}
inline ::hdmap_proto::Id* Tile::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Tile::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Tile.id)
}

// required .hdmap_proto.Idx idx = 2;
inline bool Tile::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tile::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tile::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tile::clear_idx() {
  if (idx_ != NULL) idx_->::hdmap_proto::Idx::Clear();
  clear_has_idx();
}
inline const ::hdmap_proto::Idx& Tile::idx() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.idx)
  return idx_ != NULL ? *idx_ : *default_instance_->idx_;
}
inline ::hdmap_proto::Idx* Tile::mutable_idx() {
  set_has_idx();
  if (idx_ == NULL) idx_ = new ::hdmap_proto::Idx;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.idx)
  return idx_;
}
inline ::hdmap_proto::Idx* Tile::release_idx() {
  clear_has_idx();
  ::hdmap_proto::Idx* temp = idx_;
  idx_ = NULL;
  return temp;
}
inline void Tile::set_allocated_idx(::hdmap_proto::Idx* idx) {
  delete idx_;
  idx_ = idx;
  if (idx) {
    set_has_idx();
  } else {
    clear_has_idx();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Tile.idx)
}

// required .hdmap_proto.Vector3d min_point = 4;
inline bool Tile::has_min_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tile::set_has_min_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tile::clear_has_min_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tile::clear_min_point() {
  if (min_point_ != NULL) min_point_->::hdmap_proto::Vector3d::Clear();
  clear_has_min_point();
}
inline const ::hdmap_proto::Vector3d& Tile::min_point() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.min_point)
  return min_point_ != NULL ? *min_point_ : *default_instance_->min_point_;
}
inline ::hdmap_proto::Vector3d* Tile::mutable_min_point() {
  set_has_min_point();
  if (min_point_ == NULL) min_point_ = new ::hdmap_proto::Vector3d;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.min_point)
  return min_point_;
}
inline ::hdmap_proto::Vector3d* Tile::release_min_point() {
  clear_has_min_point();
  ::hdmap_proto::Vector3d* temp = min_point_;
  min_point_ = NULL;
  return temp;
}
inline void Tile::set_allocated_min_point(::hdmap_proto::Vector3d* min_point) {
  delete min_point_;
  min_point_ = min_point;
  if (min_point) {
    set_has_min_point();
  } else {
    clear_has_min_point();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Tile.min_point)
}

// required .hdmap_proto.Tile.TileRange range = 5;
inline bool Tile::has_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tile::set_has_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tile::clear_has_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tile::clear_range() {
  range_ = 40;
  clear_has_range();
}
inline ::hdmap_proto::Tile_TileRange Tile::range() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.range)
  return static_cast< ::hdmap_proto::Tile_TileRange >(range_);
}
inline void Tile::set_range(::hdmap_proto::Tile_TileRange value) {
  assert(::hdmap_proto::Tile_TileRange_IsValid(value));
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Tile.range)
}

// repeated .hdmap_proto.Id childs = 6;
inline int Tile::childs_size() const {
  return childs_.size();
}
inline void Tile::clear_childs() {
  childs_.Clear();
}
inline const ::hdmap_proto::Id& Tile::childs(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.childs)
  return childs_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_childs(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.childs)
  return childs_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_childs() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.childs)
  return childs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::childs() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.childs)
  return childs_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_childs() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.childs)
  return &childs_;
}

// repeated .hdmap_proto.Id crosswalk_ids = 10;
inline int Tile::crosswalk_ids_size() const {
  return crosswalk_ids_.size();
}
inline void Tile::clear_crosswalk_ids() {
  crosswalk_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::crosswalk_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.crosswalk_ids)
  return crosswalk_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_crosswalk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.crosswalk_ids)
  return crosswalk_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_crosswalk_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.crosswalk_ids)
  return crosswalk_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::crosswalk_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.crosswalk_ids)
  return crosswalk_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_crosswalk_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.crosswalk_ids)
  return &crosswalk_ids_;
}

// repeated .hdmap_proto.Id junction_ids = 11;
inline int Tile::junction_ids_size() const {
  return junction_ids_.size();
}
inline void Tile::clear_junction_ids() {
  junction_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::junction_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.junction_ids)
  return junction_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_junction_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.junction_ids)
  return junction_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_junction_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.junction_ids)
  return junction_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::junction_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.junction_ids)
  return junction_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_junction_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.junction_ids)
  return &junction_ids_;
}

// repeated .hdmap_proto.Id parkingspace_ids = 12;
inline int Tile::parkingspace_ids_size() const {
  return parkingspace_ids_.size();
}
inline void Tile::clear_parkingspace_ids() {
  parkingspace_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::parkingspace_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.parkingspace_ids)
  return parkingspace_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_parkingspace_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.parkingspace_ids)
  return parkingspace_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_parkingspace_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.parkingspace_ids)
  return parkingspace_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::parkingspace_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.parkingspace_ids)
  return parkingspace_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_parkingspace_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.parkingspace_ids)
  return &parkingspace_ids_;
}

// repeated .hdmap_proto.Id section_ids = 13;
inline int Tile::section_ids_size() const {
  return section_ids_.size();
}
inline void Tile::clear_section_ids() {
  section_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::section_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.section_ids)
  return section_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_section_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.section_ids)
  return section_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_section_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.section_ids)
  return section_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::section_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.section_ids)
  return section_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_section_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.section_ids)
  return &section_ids_;
}

// repeated .hdmap_proto.Id refline_ids = 14;
inline int Tile::refline_ids_size() const {
  return refline_ids_.size();
}
inline void Tile::clear_refline_ids() {
  refline_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::refline_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.refline_ids)
  return refline_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_refline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.refline_ids)
  return refline_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_refline_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.refline_ids)
  return refline_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::refline_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.refline_ids)
  return refline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_refline_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.refline_ids)
  return &refline_ids_;
}

// repeated .hdmap_proto.Id lane_ids = 15;
inline int Tile::lane_ids_size() const {
  return lane_ids_.size();
}
inline void Tile::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.lane_ids)
  return lane_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.lane_ids)
  return lane_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_lane_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.lane_ids)
  return lane_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::lane_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.lane_ids)
  return &lane_ids_;
}

// repeated .hdmap_proto.Id stopline_ids = 16;
inline int Tile::stopline_ids_size() const {
  return stopline_ids_.size();
}
inline void Tile::clear_stopline_ids() {
  stopline_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::stopline_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.stopline_ids)
  return stopline_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_stopline_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.stopline_ids)
  return stopline_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_stopline_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.stopline_ids)
  return stopline_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::stopline_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.stopline_ids)
  return stopline_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_stopline_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.stopline_ids)
  return &stopline_ids_;
}

// repeated .hdmap_proto.Id speedbump_ids = 17;
inline int Tile::speedbump_ids_size() const {
  return speedbump_ids_.size();
}
inline void Tile::clear_speedbump_ids() {
  speedbump_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::speedbump_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.speedbump_ids)
  return speedbump_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_speedbump_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.speedbump_ids)
  return speedbump_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_speedbump_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.speedbump_ids)
  return speedbump_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::speedbump_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.speedbump_ids)
  return speedbump_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_speedbump_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.speedbump_ids)
  return &speedbump_ids_;
}

// repeated .hdmap_proto.Id pole_ids = 18;
inline int Tile::pole_ids_size() const {
  return pole_ids_.size();
}
inline void Tile::clear_pole_ids() {
  pole_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::pole_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.pole_ids)
  return pole_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_pole_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.pole_ids)
  return pole_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_pole_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.pole_ids)
  return pole_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::pole_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.pole_ids)
  return pole_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_pole_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.pole_ids)
  return &pole_ids_;
}

// repeated .hdmap_proto.Id board_ids = 19;
inline int Tile::board_ids_size() const {
  return board_ids_.size();
}
inline void Tile::clear_board_ids() {
  board_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::board_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.board_ids)
  return board_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_board_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.board_ids)
  return board_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_board_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.board_ids)
  return board_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::board_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.board_ids)
  return board_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_board_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.board_ids)
  return &board_ids_;
}

// repeated .hdmap_proto.Id zone_ids = 20;
inline int Tile::zone_ids_size() const {
  return zone_ids_.size();
}
inline void Tile::clear_zone_ids() {
  zone_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::zone_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.zone_ids)
  return zone_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_zone_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.zone_ids)
  return zone_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_zone_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.zone_ids)
  return zone_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::zone_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.zone_ids)
  return zone_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_zone_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.zone_ids)
  return &zone_ids_;
}

// repeated .hdmap_proto.Id lane_marking_ids = 21;
inline int Tile::lane_marking_ids_size() const {
  return lane_marking_ids_.size();
}
inline void Tile::clear_lane_marking_ids() {
  lane_marking_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::lane_marking_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.lane_marking_ids)
  return lane_marking_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_lane_marking_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.lane_marking_ids)
  return lane_marking_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_lane_marking_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.lane_marking_ids)
  return lane_marking_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::lane_marking_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.lane_marking_ids)
  return lane_marking_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_lane_marking_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.lane_marking_ids)
  return &lane_marking_ids_;
}

// repeated .hdmap_proto.Id traffic_light_ids = 22;
inline int Tile::traffic_light_ids_size() const {
  return traffic_light_ids_.size();
}
inline void Tile::clear_traffic_light_ids() {
  traffic_light_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::traffic_light_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.traffic_light_ids)
  return traffic_light_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_traffic_light_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.traffic_light_ids)
  return traffic_light_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_traffic_light_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.traffic_light_ids)
  return traffic_light_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::traffic_light_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.traffic_light_ids)
  return traffic_light_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_traffic_light_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.traffic_light_ids)
  return &traffic_light_ids_;
}

// repeated .hdmap_proto.Id traffic_sign_ids = 23;
inline int Tile::traffic_sign_ids_size() const {
  return traffic_sign_ids_.size();
}
inline void Tile::clear_traffic_sign_ids() {
  traffic_sign_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::traffic_sign_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.traffic_sign_ids)
  return traffic_sign_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_traffic_sign_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.traffic_sign_ids)
  return traffic_sign_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_traffic_sign_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.traffic_sign_ids)
  return traffic_sign_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::traffic_sign_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.traffic_sign_ids)
  return traffic_sign_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_traffic_sign_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.traffic_sign_ids)
  return &traffic_sign_ids_;
}

// repeated .hdmap_proto.Id parking_space_ids = 24;
inline int Tile::parking_space_ids_size() const {
  return parking_space_ids_.size();
}
inline void Tile::clear_parking_space_ids() {
  parking_space_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::parking_space_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.parking_space_ids)
  return parking_space_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_parking_space_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.parking_space_ids)
  return parking_space_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_parking_space_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.parking_space_ids)
  return parking_space_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::parking_space_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.parking_space_ids)
  return parking_space_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_parking_space_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.parking_space_ids)
  return &parking_space_ids_;
}

// repeated .hdmap_proto.Id sections_ids = 25;
inline int Tile::sections_ids_size() const {
  return sections_ids_.size();
}
inline void Tile::clear_sections_ids() {
  sections_ids_.Clear();
}
inline const ::hdmap_proto::Id& Tile::sections_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Tile.sections_ids)
  return sections_ids_.Get(index);
}
inline ::hdmap_proto::Id* Tile::mutable_sections_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Tile.sections_ids)
  return sections_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Tile::add_sections_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Tile.sections_ids)
  return sections_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Tile::sections_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Tile.sections_ids)
  return sections_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Tile::mutable_sections_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Tile.sections_ids)
  return &sections_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdmap_proto::Tile_TileRange> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::Tile_TileRange>() {
  return ::hdmap_proto::Tile_TileRange_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tile_2eproto__INCLUDED
