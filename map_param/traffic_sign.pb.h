// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic_sign.proto

#ifndef PROTOBUF_traffic_5fsign_2eproto__INCLUDED
#define PROTOBUF_traffic_5fsign_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_traffic_5fsign_2eproto();
void protobuf_AssignDesc_traffic_5fsign_2eproto();
void protobuf_ShutdownFile_traffic_5fsign_2eproto();

class TrafficSign;

enum TrafficSign_TrafficSignType {
  TrafficSign_TrafficSignType_UNKNOWN = 0,
  TrafficSign_TrafficSignType_P_Stop_For = 1,
  TrafficSign_TrafficSignType_P_Slow_For = 2,
  TrafficSign_TrafficSignType_P_Give_Way = 3,
  TrafficSign_TrafficSignType_P_Noway = 4,
  TrafficSign_TrafficSignType_P_No_Entry = 5,
  TrafficSign_TrafficSignType_P_No_Parking = 6,
  TrafficSign_TrafficSignType_P_No_Long_Parking = 7,
  TrafficSign_TrafficSignType_P_Parking_Check = 8,
  TrafficSign_TrafficSignType_P_No_Motor = 9,
  TrafficSign_TrafficSignType_P_No_Motorcycle = 10,
  TrafficSign_TrafficSignType_P_No_Truck = 11,
  TrafficSign_TrafficSignType_P_No_Moto_Tricycle = 12,
  TrafficSign_TrafficSignType_P_No_Bus = 13,
  TrafficSign_TrafficSignType_P_No_Car = 14,
  TrafficSign_TrafficSignType_P_No_Trailer = 15,
  TrafficSign_TrafficSignType_P_No_Tractor = 16,
  TrafficSign_TrafficSignType_P_No_Cargo_Tricycle = 17,
  TrafficSign_TrafficSignType_P_No_Non_Motor = 18,
  TrafficSign_TrafficSignType_P_No_Animal_Vehicle = 19,
  TrafficSign_TrafficSignType_P_No_Human_Vehicle = 20,
  TrafficSign_TrafficSignType_P_No_Human_Cargo_Triangle = 21,
  TrafficSign_TrafficSignType_P_No_Human_Passenger_Triangle = 22,
  TrafficSign_TrafficSignType_P_No_Human = 23,
  TrafficSign_TrafficSignType_P_No_Left_Turn = 24,
  TrafficSign_TrafficSignType_P_No_Right_Turn = 25,
  TrafficSign_TrafficSignType_P_No_Left_Right_Turn = 26,
  TrafficSign_TrafficSignType_P_No_Foward = 27,
  TrafficSign_TrafficSignType_P_No_Forward_Left = 28,
  TrafficSign_TrafficSignType_P_No_Forward_Right = 29,
  TrafficSign_TrafficSignType_P_No_Return = 30,
  TrafficSign_TrafficSignType_P_No_Horning = 31,
  TrafficSign_TrafficSignType_P_Height_Lim = 32,
  TrafficSign_TrafficSignType_P_Width_Lim = 33,
  TrafficSign_TrafficSignType_P_Weight_Lim = 34,
  TrafficSign_TrafficSignType_P_Weight_Lim_wheel = 35,
  TrafficSign_TrafficSignType_P_Speed_Lim = 36,
  TrafficSign_TrafficSignType_P_Speed_Lim_Rev = 37,
  TrafficSign_TrafficSignType_P_No_Passing = 38,
  TrafficSign_TrafficSignType_P_No_Dangerous = 39,
  TrafficSign_TrafficSignType_P_Custom = 40,
  TrafficSign_TrafficSignType_P_Other = 41,
  TrafficSign_TrafficSignType_W_T_Shap = 42,
  TrafficSign_TrafficSignType_W_T_Shap_Left = 43,
  TrafficSign_TrafficSignType_W_T_Shap_Right = 44,
  TrafficSign_TrafficSignType_W_T_Shaps = 45,
  TrafficSign_TrafficSignType_W_Cross = 46,
  TrafficSign_TrafficSignType_W_Circle = 47,
  TrafficSign_TrafficSignType_W_Y_Left = 48,
  TrafficSign_TrafficSignType_W_Y_Right = 49,
  TrafficSign_TrafficSignType_W_YB_Left = 50,
  TrafficSign_TrafficSignType_W_YB_Right = 51,
  TrafficSign_TrafficSignType_W_Left_Turn = 52,
  TrafficSign_TrafficSignType_W_Right_Turn = 53,
  TrafficSign_TrafficSignType_W_RL_Turn = 54,
  TrafficSign_TrafficSignType_W_LR_Turn = 55,
  TrafficSign_TrafficSignType_W_Continuous_Turn = 56,
  TrafficSign_TrafficSignType_W_Up = 57,
  TrafficSign_TrafficSignType_W_Down = 58,
  TrafficSign_TrafficSignType_W_Continuous_Down = 59,
  TrafficSign_TrafficSignType_W_Accident_Prone = 60,
  TrafficSign_TrafficSignType_W_Danger = 61,
  TrafficSign_TrafficSignType_W_Left_Narrow = 62,
  TrafficSign_TrafficSignType_W_Right_Narrow = 63,
  TrafficSign_TrafficSignType_W_LR_Narrow = 64,
  TrafficSign_TrafficSignType_W_Narrow_Bridge = 65,
  TrafficSign_TrafficSignType_W_Slip = 66,
  TrafficSign_TrafficSignType_W_Pedestrain = 67,
  TrafficSign_TrafficSignType_W_Children = 68,
  TrafficSign_TrafficSignType_W_Cycle = 69,
  TrafficSign_TrafficSignType_W_Disabled = 70,
  TrafficSign_TrafficSignType_W_Side_Wind = 71,
  TrafficSign_TrafficSignType_W_Domestic = 72,
  TrafficSign_TrafficSignType_W_Animal = 73,
  TrafficSign_TrafficSignType_W_Tunnel = 74,
  TrafficSign_TrafficSignType_W_Tunnel_Headlight = 75,
  TrafficSign_TrafficSignType_W_Traffic_Light = 76,
  TrafficSign_TrafficSignType_W_Left_Falling = 77,
  TrafficSign_TrafficSignType_W_Right_Falling = 78,
  TrafficSign_TrafficSignType_W_Mount_Left = 79,
  TrafficSign_TrafficSignType_W_Mount_Right = 80,
  TrafficSign_TrafficSignType_W_Village = 81,
  TrafficSign_TrafficSignType_W_Dam_Right = 82,
  TrafficSign_TrafficSignType_W_Dam_Left = 83,
  TrafficSign_TrafficSignType_W_Ferry = 84,
  TrafficSign_TrafficSignType_W_Ford = 85,
  TrafficSign_TrafficSignType_W_Slow = 86,
  TrafficSign_TrafficSignType_W_Hump_Bridge = 87,
  TrafficSign_TrafficSignType_W_Bumpy = 88,
  TrafficSign_TrafficSignType_W_Bump = 89,
  TrafficSign_TrafficSignType_W_Low_Lying = 90,
  TrafficSign_TrafficSignType_W_Working = 91,
  TrafficSign_TrafficSignType_W_Guarded_Railway = 92,
  TrafficSign_TrafficSignType_W_Railway = 93,
  TrafficSign_TrafficSignType_W_Detour_Around = 94,
  TrafficSign_TrafficSignType_W_Detour_Left = 95,
  TrafficSign_TrafficSignType_W_Detour_Right = 96,
  TrafficSign_TrafficSignType_W_Merge_Left = 97,
  TrafficSign_TrafficSignType_W_Merge_Right = 98,
  TrafficSign_TrafficSignType_W_Two_Way = 99,
  TrafficSign_TrafficSignType_W_Tidal = 100,
  TrafficSign_TrafficSignType_W_Keep_Distance = 101,
  TrafficSign_TrafficSignType_W_Cross_Intersection = 102,
  TrafficSign_TrafficSignType_W_T_Intersection = 103,
  TrafficSign_TrafficSignType_W_Vehicle_Queue = 104,
  TrafficSign_TrafficSignType_W_Ice = 105,
  TrafficSign_TrafficSignType_W_Rain = 106,
  TrafficSign_TrafficSignType_W_Fog = 107,
  TrafficSign_TrafficSignType_W_Bad_Weather = 108,
  TrafficSign_TrafficSignType_W_Other = 109,
  TrafficSign_TrafficSignType_I_Forward = 110,
  TrafficSign_TrafficSignType_I_Left_Turn = 111,
  TrafficSign_TrafficSignType_I_Right_Turn = 112,
  TrafficSign_TrafficSignType_I_Forward_Left = 113,
  TrafficSign_TrafficSignType_I_Forward_Right = 114,
  TrafficSign_TrafficSignType_I_Left_Right = 115,
  TrafficSign_TrafficSignType_I_Right = 116,
  TrafficSign_TrafficSignType_I_Left = 117,
  TrafficSign_TrafficSignType_I_Forward_Left_Stereo = 118,
  TrafficSign_TrafficSignType_I_Forward_Right_Stereo = 119,
  TrafficSign_TrafficSignType_I_Circle = 120,
  TrafficSign_TrafficSignType_I_Walk = 121,
  TrafficSign_TrafficSignType_I_Honk = 122,
  TrafficSign_TrafficSignType_I_Min_Speed_Lim = 123,
  TrafficSign_TrafficSignType_I_Motors = 124,
  TrafficSign_TrafficSignType_I_Non_Motors = 125,
  TrafficSign_TrafficSignType_I_Pedestrian_Cross = 126,
  TrafficSign_TrafficSignType_I_Other = 127
};
bool TrafficSign_TrafficSignType_IsValid(int value);
const TrafficSign_TrafficSignType TrafficSign_TrafficSignType_TrafficSignType_MIN = TrafficSign_TrafficSignType_UNKNOWN;
const TrafficSign_TrafficSignType TrafficSign_TrafficSignType_TrafficSignType_MAX = TrafficSign_TrafficSignType_I_Other;
const int TrafficSign_TrafficSignType_TrafficSignType_ARRAYSIZE = TrafficSign_TrafficSignType_TrafficSignType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSign_TrafficSignType_descriptor();
inline const ::std::string& TrafficSign_TrafficSignType_Name(TrafficSign_TrafficSignType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSign_TrafficSignType_descriptor(), value);
}
inline bool TrafficSign_TrafficSignType_Parse(
    const ::std::string& name, TrafficSign_TrafficSignType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSign_TrafficSignType>(
    TrafficSign_TrafficSignType_descriptor(), name, value);
}
// ===================================================================

class TrafficSign : public ::google::protobuf::Message {
 public:
  TrafficSign();
  virtual ~TrafficSign();

  TrafficSign(const TrafficSign& from);

  inline TrafficSign& operator=(const TrafficSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSign& default_instance();

  enum GeometryCase {
    kCborder = 5,
    kPborder = 6,
    GEOMETRY_NOT_SET = 0,
  };

  void Swap(TrafficSign* other);

  // implements Message ----------------------------------------------

  TrafficSign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficSign& from);
  void MergeFrom(const TrafficSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficSign_TrafficSignType TrafficSignType;
  static const TrafficSignType UNKNOWN = TrafficSign_TrafficSignType_UNKNOWN;
  static const TrafficSignType P_Stop_For = TrafficSign_TrafficSignType_P_Stop_For;
  static const TrafficSignType P_Slow_For = TrafficSign_TrafficSignType_P_Slow_For;
  static const TrafficSignType P_Give_Way = TrafficSign_TrafficSignType_P_Give_Way;
  static const TrafficSignType P_Noway = TrafficSign_TrafficSignType_P_Noway;
  static const TrafficSignType P_No_Entry = TrafficSign_TrafficSignType_P_No_Entry;
  static const TrafficSignType P_No_Parking = TrafficSign_TrafficSignType_P_No_Parking;
  static const TrafficSignType P_No_Long_Parking = TrafficSign_TrafficSignType_P_No_Long_Parking;
  static const TrafficSignType P_Parking_Check = TrafficSign_TrafficSignType_P_Parking_Check;
  static const TrafficSignType P_No_Motor = TrafficSign_TrafficSignType_P_No_Motor;
  static const TrafficSignType P_No_Motorcycle = TrafficSign_TrafficSignType_P_No_Motorcycle;
  static const TrafficSignType P_No_Truck = TrafficSign_TrafficSignType_P_No_Truck;
  static const TrafficSignType P_No_Moto_Tricycle = TrafficSign_TrafficSignType_P_No_Moto_Tricycle;
  static const TrafficSignType P_No_Bus = TrafficSign_TrafficSignType_P_No_Bus;
  static const TrafficSignType P_No_Car = TrafficSign_TrafficSignType_P_No_Car;
  static const TrafficSignType P_No_Trailer = TrafficSign_TrafficSignType_P_No_Trailer;
  static const TrafficSignType P_No_Tractor = TrafficSign_TrafficSignType_P_No_Tractor;
  static const TrafficSignType P_No_Cargo_Tricycle = TrafficSign_TrafficSignType_P_No_Cargo_Tricycle;
  static const TrafficSignType P_No_Non_Motor = TrafficSign_TrafficSignType_P_No_Non_Motor;
  static const TrafficSignType P_No_Animal_Vehicle = TrafficSign_TrafficSignType_P_No_Animal_Vehicle;
  static const TrafficSignType P_No_Human_Vehicle = TrafficSign_TrafficSignType_P_No_Human_Vehicle;
  static const TrafficSignType P_No_Human_Cargo_Triangle = TrafficSign_TrafficSignType_P_No_Human_Cargo_Triangle;
  static const TrafficSignType P_No_Human_Passenger_Triangle = TrafficSign_TrafficSignType_P_No_Human_Passenger_Triangle;
  static const TrafficSignType P_No_Human = TrafficSign_TrafficSignType_P_No_Human;
  static const TrafficSignType P_No_Left_Turn = TrafficSign_TrafficSignType_P_No_Left_Turn;
  static const TrafficSignType P_No_Right_Turn = TrafficSign_TrafficSignType_P_No_Right_Turn;
  static const TrafficSignType P_No_Left_Right_Turn = TrafficSign_TrafficSignType_P_No_Left_Right_Turn;
  static const TrafficSignType P_No_Foward = TrafficSign_TrafficSignType_P_No_Foward;
  static const TrafficSignType P_No_Forward_Left = TrafficSign_TrafficSignType_P_No_Forward_Left;
  static const TrafficSignType P_No_Forward_Right = TrafficSign_TrafficSignType_P_No_Forward_Right;
  static const TrafficSignType P_No_Return = TrafficSign_TrafficSignType_P_No_Return;
  static const TrafficSignType P_No_Horning = TrafficSign_TrafficSignType_P_No_Horning;
  static const TrafficSignType P_Height_Lim = TrafficSign_TrafficSignType_P_Height_Lim;
  static const TrafficSignType P_Width_Lim = TrafficSign_TrafficSignType_P_Width_Lim;
  static const TrafficSignType P_Weight_Lim = TrafficSign_TrafficSignType_P_Weight_Lim;
  static const TrafficSignType P_Weight_Lim_wheel = TrafficSign_TrafficSignType_P_Weight_Lim_wheel;
  static const TrafficSignType P_Speed_Lim = TrafficSign_TrafficSignType_P_Speed_Lim;
  static const TrafficSignType P_Speed_Lim_Rev = TrafficSign_TrafficSignType_P_Speed_Lim_Rev;
  static const TrafficSignType P_No_Passing = TrafficSign_TrafficSignType_P_No_Passing;
  static const TrafficSignType P_No_Dangerous = TrafficSign_TrafficSignType_P_No_Dangerous;
  static const TrafficSignType P_Custom = TrafficSign_TrafficSignType_P_Custom;
  static const TrafficSignType P_Other = TrafficSign_TrafficSignType_P_Other;
  static const TrafficSignType W_T_Shap = TrafficSign_TrafficSignType_W_T_Shap;
  static const TrafficSignType W_T_Shap_Left = TrafficSign_TrafficSignType_W_T_Shap_Left;
  static const TrafficSignType W_T_Shap_Right = TrafficSign_TrafficSignType_W_T_Shap_Right;
  static const TrafficSignType W_T_Shaps = TrafficSign_TrafficSignType_W_T_Shaps;
  static const TrafficSignType W_Cross = TrafficSign_TrafficSignType_W_Cross;
  static const TrafficSignType W_Circle = TrafficSign_TrafficSignType_W_Circle;
  static const TrafficSignType W_Y_Left = TrafficSign_TrafficSignType_W_Y_Left;
  static const TrafficSignType W_Y_Right = TrafficSign_TrafficSignType_W_Y_Right;
  static const TrafficSignType W_YB_Left = TrafficSign_TrafficSignType_W_YB_Left;
  static const TrafficSignType W_YB_Right = TrafficSign_TrafficSignType_W_YB_Right;
  static const TrafficSignType W_Left_Turn = TrafficSign_TrafficSignType_W_Left_Turn;
  static const TrafficSignType W_Right_Turn = TrafficSign_TrafficSignType_W_Right_Turn;
  static const TrafficSignType W_RL_Turn = TrafficSign_TrafficSignType_W_RL_Turn;
  static const TrafficSignType W_LR_Turn = TrafficSign_TrafficSignType_W_LR_Turn;
  static const TrafficSignType W_Continuous_Turn = TrafficSign_TrafficSignType_W_Continuous_Turn;
  static const TrafficSignType W_Up = TrafficSign_TrafficSignType_W_Up;
  static const TrafficSignType W_Down = TrafficSign_TrafficSignType_W_Down;
  static const TrafficSignType W_Continuous_Down = TrafficSign_TrafficSignType_W_Continuous_Down;
  static const TrafficSignType W_Accident_Prone = TrafficSign_TrafficSignType_W_Accident_Prone;
  static const TrafficSignType W_Danger = TrafficSign_TrafficSignType_W_Danger;
  static const TrafficSignType W_Left_Narrow = TrafficSign_TrafficSignType_W_Left_Narrow;
  static const TrafficSignType W_Right_Narrow = TrafficSign_TrafficSignType_W_Right_Narrow;
  static const TrafficSignType W_LR_Narrow = TrafficSign_TrafficSignType_W_LR_Narrow;
  static const TrafficSignType W_Narrow_Bridge = TrafficSign_TrafficSignType_W_Narrow_Bridge;
  static const TrafficSignType W_Slip = TrafficSign_TrafficSignType_W_Slip;
  static const TrafficSignType W_Pedestrain = TrafficSign_TrafficSignType_W_Pedestrain;
  static const TrafficSignType W_Children = TrafficSign_TrafficSignType_W_Children;
  static const TrafficSignType W_Cycle = TrafficSign_TrafficSignType_W_Cycle;
  static const TrafficSignType W_Disabled = TrafficSign_TrafficSignType_W_Disabled;
  static const TrafficSignType W_Side_Wind = TrafficSign_TrafficSignType_W_Side_Wind;
  static const TrafficSignType W_Domestic = TrafficSign_TrafficSignType_W_Domestic;
  static const TrafficSignType W_Animal = TrafficSign_TrafficSignType_W_Animal;
  static const TrafficSignType W_Tunnel = TrafficSign_TrafficSignType_W_Tunnel;
  static const TrafficSignType W_Tunnel_Headlight = TrafficSign_TrafficSignType_W_Tunnel_Headlight;
  static const TrafficSignType W_Traffic_Light = TrafficSign_TrafficSignType_W_Traffic_Light;
  static const TrafficSignType W_Left_Falling = TrafficSign_TrafficSignType_W_Left_Falling;
  static const TrafficSignType W_Right_Falling = TrafficSign_TrafficSignType_W_Right_Falling;
  static const TrafficSignType W_Mount_Left = TrafficSign_TrafficSignType_W_Mount_Left;
  static const TrafficSignType W_Mount_Right = TrafficSign_TrafficSignType_W_Mount_Right;
  static const TrafficSignType W_Village = TrafficSign_TrafficSignType_W_Village;
  static const TrafficSignType W_Dam_Right = TrafficSign_TrafficSignType_W_Dam_Right;
  static const TrafficSignType W_Dam_Left = TrafficSign_TrafficSignType_W_Dam_Left;
  static const TrafficSignType W_Ferry = TrafficSign_TrafficSignType_W_Ferry;
  static const TrafficSignType W_Ford = TrafficSign_TrafficSignType_W_Ford;
  static const TrafficSignType W_Slow = TrafficSign_TrafficSignType_W_Slow;
  static const TrafficSignType W_Hump_Bridge = TrafficSign_TrafficSignType_W_Hump_Bridge;
  static const TrafficSignType W_Bumpy = TrafficSign_TrafficSignType_W_Bumpy;
  static const TrafficSignType W_Bump = TrafficSign_TrafficSignType_W_Bump;
  static const TrafficSignType W_Low_Lying = TrafficSign_TrafficSignType_W_Low_Lying;
  static const TrafficSignType W_Working = TrafficSign_TrafficSignType_W_Working;
  static const TrafficSignType W_Guarded_Railway = TrafficSign_TrafficSignType_W_Guarded_Railway;
  static const TrafficSignType W_Railway = TrafficSign_TrafficSignType_W_Railway;
  static const TrafficSignType W_Detour_Around = TrafficSign_TrafficSignType_W_Detour_Around;
  static const TrafficSignType W_Detour_Left = TrafficSign_TrafficSignType_W_Detour_Left;
  static const TrafficSignType W_Detour_Right = TrafficSign_TrafficSignType_W_Detour_Right;
  static const TrafficSignType W_Merge_Left = TrafficSign_TrafficSignType_W_Merge_Left;
  static const TrafficSignType W_Merge_Right = TrafficSign_TrafficSignType_W_Merge_Right;
  static const TrafficSignType W_Two_Way = TrafficSign_TrafficSignType_W_Two_Way;
  static const TrafficSignType W_Tidal = TrafficSign_TrafficSignType_W_Tidal;
  static const TrafficSignType W_Keep_Distance = TrafficSign_TrafficSignType_W_Keep_Distance;
  static const TrafficSignType W_Cross_Intersection = TrafficSign_TrafficSignType_W_Cross_Intersection;
  static const TrafficSignType W_T_Intersection = TrafficSign_TrafficSignType_W_T_Intersection;
  static const TrafficSignType W_Vehicle_Queue = TrafficSign_TrafficSignType_W_Vehicle_Queue;
  static const TrafficSignType W_Ice = TrafficSign_TrafficSignType_W_Ice;
  static const TrafficSignType W_Rain = TrafficSign_TrafficSignType_W_Rain;
  static const TrafficSignType W_Fog = TrafficSign_TrafficSignType_W_Fog;
  static const TrafficSignType W_Bad_Weather = TrafficSign_TrafficSignType_W_Bad_Weather;
  static const TrafficSignType W_Other = TrafficSign_TrafficSignType_W_Other;
  static const TrafficSignType I_Forward = TrafficSign_TrafficSignType_I_Forward;
  static const TrafficSignType I_Left_Turn = TrafficSign_TrafficSignType_I_Left_Turn;
  static const TrafficSignType I_Right_Turn = TrafficSign_TrafficSignType_I_Right_Turn;
  static const TrafficSignType I_Forward_Left = TrafficSign_TrafficSignType_I_Forward_Left;
  static const TrafficSignType I_Forward_Right = TrafficSign_TrafficSignType_I_Forward_Right;
  static const TrafficSignType I_Left_Right = TrafficSign_TrafficSignType_I_Left_Right;
  static const TrafficSignType I_Right = TrafficSign_TrafficSignType_I_Right;
  static const TrafficSignType I_Left = TrafficSign_TrafficSignType_I_Left;
  static const TrafficSignType I_Forward_Left_Stereo = TrafficSign_TrafficSignType_I_Forward_Left_Stereo;
  static const TrafficSignType I_Forward_Right_Stereo = TrafficSign_TrafficSignType_I_Forward_Right_Stereo;
  static const TrafficSignType I_Circle = TrafficSign_TrafficSignType_I_Circle;
  static const TrafficSignType I_Walk = TrafficSign_TrafficSignType_I_Walk;
  static const TrafficSignType I_Honk = TrafficSign_TrafficSignType_I_Honk;
  static const TrafficSignType I_Min_Speed_Lim = TrafficSign_TrafficSignType_I_Min_Speed_Lim;
  static const TrafficSignType I_Motors = TrafficSign_TrafficSignType_I_Motors;
  static const TrafficSignType I_Non_Motors = TrafficSign_TrafficSignType_I_Non_Motors;
  static const TrafficSignType I_Pedestrian_Cross = TrafficSign_TrafficSignType_I_Pedestrian_Cross;
  static const TrafficSignType I_Other = TrafficSign_TrafficSignType_I_Other;
  static inline bool TrafficSignType_IsValid(int value) {
    return TrafficSign_TrafficSignType_IsValid(value);
  }
  static const TrafficSignType TrafficSignType_MIN =
    TrafficSign_TrafficSignType_TrafficSignType_MIN;
  static const TrafficSignType TrafficSignType_MAX =
    TrafficSign_TrafficSignType_TrafficSignType_MAX;
  static const int TrafficSignType_ARRAYSIZE =
    TrafficSign_TrafficSignType_TrafficSignType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignType_descriptor() {
    return TrafficSign_TrafficSignType_descriptor();
  }
  static inline const ::std::string& TrafficSignType_Name(TrafficSignType value) {
    return TrafficSign_TrafficSignType_Name(value);
  }
  static inline bool TrafficSignType_Parse(const ::std::string& name,
      TrafficSignType* value) {
    return TrafficSign_TrafficSignType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_id = 2;
  inline int tile_id_size() const;
  inline void clear_tile_id();
  static const int kTileIdFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_id(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_id(int index);
  inline ::hdmap_proto::Id* add_tile_id();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_id();

  // optional .hdmap_proto.TrafficSign.TrafficSignType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::hdmap_proto::TrafficSign_TrafficSignType type() const;
  inline void set_type(::hdmap_proto::TrafficSign_TrafficSignType value);

  // optional .hdmap_proto.Circle cborder = 5;
  inline bool has_cborder() const;
  inline void clear_cborder();
  static const int kCborderFieldNumber = 5;
  inline const ::hdmap_proto::Circle& cborder() const;
  inline ::hdmap_proto::Circle* mutable_cborder();
  inline ::hdmap_proto::Circle* release_cborder();
  inline void set_allocated_cborder(::hdmap_proto::Circle* cborder);

  // optional .hdmap_proto.Polygon pborder = 6;
  inline bool has_pborder() const;
  inline void clear_pborder();
  static const int kPborderFieldNumber = 6;
  inline const ::hdmap_proto::Polygon& pborder() const;
  inline ::hdmap_proto::Polygon* mutable_pborder();
  inline ::hdmap_proto::Polygon* release_pborder();
  inline void set_allocated_pborder(::hdmap_proto::Polygon* pborder);

  // optional float value = 9;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 9;
  inline float value() const;
  inline void set_value(float value);

  // repeated .hdmap_proto.Id link_ids = 10;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 10;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  inline GeometryCase geometry_case() const;
  // @@protoc_insertion_point(class_scope:hdmap_proto.TrafficSign)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cborder();
  inline void set_has_pborder();
  inline void set_has_value();
  inline void clear_has_value();

  inline bool has_geometry();
  void clear_geometry();
  inline void clear_has_geometry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_id_;
  int type_;
  float value_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  union GeometryUnion {
    ::hdmap_proto::Circle* cborder_;
    ::hdmap_proto::Polygon* pborder_;
  } geometry_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_traffic_5fsign_2eproto();
  friend void protobuf_AssignDesc_traffic_5fsign_2eproto();
  friend void protobuf_ShutdownFile_traffic_5fsign_2eproto();

  void InitAsDefaultInstance();
  static TrafficSign* default_instance_;
};
// ===================================================================


// ===================================================================

// TrafficSign

// required .hdmap_proto.Id id = 1;
inline bool TrafficSign::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficSign::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficSign::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficSign::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& TrafficSign::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.TrafficSign.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* TrafficSign::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.TrafficSign.id)
  return id_;
}
inline ::hdmap_proto::Id* TrafficSign::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void TrafficSign::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.TrafficSign.id)
}

// repeated .hdmap_proto.Id tile_id = 2;
inline int TrafficSign::tile_id_size() const {
  return tile_id_.size();
}
inline void TrafficSign::clear_tile_id() {
  tile_id_.Clear();
}
inline const ::hdmap_proto::Id& TrafficSign::tile_id(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.TrafficSign.tile_id)
  return tile_id_.Get(index);
}
inline ::hdmap_proto::Id* TrafficSign::mutable_tile_id(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.TrafficSign.tile_id)
  return tile_id_.Mutable(index);
}
inline ::hdmap_proto::Id* TrafficSign::add_tile_id() {
  // @@protoc_insertion_point(field_add:hdmap_proto.TrafficSign.tile_id)
  return tile_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
TrafficSign::tile_id() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.TrafficSign.tile_id)
  return tile_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
TrafficSign::mutable_tile_id() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.TrafficSign.tile_id)
  return &tile_id_;
}

// optional .hdmap_proto.TrafficSign.TrafficSignType type = 4;
inline bool TrafficSign::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficSign::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficSign::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficSign::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdmap_proto::TrafficSign_TrafficSignType TrafficSign::type() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.TrafficSign.type)
  return static_cast< ::hdmap_proto::TrafficSign_TrafficSignType >(type_);
}
inline void TrafficSign::set_type(::hdmap_proto::TrafficSign_TrafficSignType value) {
  assert(::hdmap_proto::TrafficSign_TrafficSignType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.TrafficSign.type)
}

// optional .hdmap_proto.Circle cborder = 5;
inline bool TrafficSign::has_cborder() const {
  return geometry_case() == kCborder;
}
inline void TrafficSign::set_has_cborder() {
  _oneof_case_[0] = kCborder;
}
inline void TrafficSign::clear_cborder() {
  if (has_cborder()) {
    delete geometry_.cborder_;
    clear_has_geometry();
  }
}
inline const ::hdmap_proto::Circle& TrafficSign::cborder() const {
  return has_cborder() ? *geometry_.cborder_
                      : ::hdmap_proto::Circle::default_instance();
}
inline ::hdmap_proto::Circle* TrafficSign::mutable_cborder() {
  if (!has_cborder()) {
    clear_geometry();
    set_has_cborder();
    geometry_.cborder_ = new ::hdmap_proto::Circle;
  }
  return geometry_.cborder_;
}
inline ::hdmap_proto::Circle* TrafficSign::release_cborder() {
  if (has_cborder()) {
    clear_has_geometry();
    ::hdmap_proto::Circle* temp = geometry_.cborder_;
    geometry_.cborder_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TrafficSign::set_allocated_cborder(::hdmap_proto::Circle* cborder) {
  clear_geometry();
  if (cborder) {
    set_has_cborder();
    geometry_.cborder_ = cborder;
  }
}

// optional .hdmap_proto.Polygon pborder = 6;
inline bool TrafficSign::has_pborder() const {
  return geometry_case() == kPborder;
}
inline void TrafficSign::set_has_pborder() {
  _oneof_case_[0] = kPborder;
}
inline void TrafficSign::clear_pborder() {
  if (has_pborder()) {
    delete geometry_.pborder_;
    clear_has_geometry();
  }
}
inline const ::hdmap_proto::Polygon& TrafficSign::pborder() const {
  return has_pborder() ? *geometry_.pborder_
                      : ::hdmap_proto::Polygon::default_instance();
}
inline ::hdmap_proto::Polygon* TrafficSign::mutable_pborder() {
  if (!has_pborder()) {
    clear_geometry();
    set_has_pborder();
    geometry_.pborder_ = new ::hdmap_proto::Polygon;
  }
  return geometry_.pborder_;
}
inline ::hdmap_proto::Polygon* TrafficSign::release_pborder() {
  if (has_pborder()) {
    clear_has_geometry();
    ::hdmap_proto::Polygon* temp = geometry_.pborder_;
    geometry_.pborder_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TrafficSign::set_allocated_pborder(::hdmap_proto::Polygon* pborder) {
  clear_geometry();
  if (pborder) {
    set_has_pborder();
    geometry_.pborder_ = pborder;
  }
}

// optional float value = 9;
inline bool TrafficSign::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficSign::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrafficSign::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrafficSign::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float TrafficSign::value() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.TrafficSign.value)
  return value_;
}
inline void TrafficSign::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.TrafficSign.value)
}

// repeated .hdmap_proto.Id link_ids = 10;
inline int TrafficSign::link_ids_size() const {
  return link_ids_.size();
}
inline void TrafficSign::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& TrafficSign::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.TrafficSign.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* TrafficSign::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.TrafficSign.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* TrafficSign::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.TrafficSign.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
TrafficSign::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.TrafficSign.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
TrafficSign::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.TrafficSign.link_ids)
  return &link_ids_;
}

inline bool TrafficSign::has_geometry() {
  return geometry_case() != GEOMETRY_NOT_SET;
}
inline void TrafficSign::clear_has_geometry() {
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}
inline TrafficSign::GeometryCase TrafficSign::geometry_case() const {
  return TrafficSign::GeometryCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdmap_proto::TrafficSign_TrafficSignType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::TrafficSign_TrafficSignType>() {
  return ::hdmap_proto::TrafficSign_TrafficSignType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_5fsign_2eproto__INCLUDED
