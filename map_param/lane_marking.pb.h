// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_marking.proto

#ifndef PROTOBUF_lane_5fmarking_2eproto__INCLUDED
#define PROTOBUF_lane_5fmarking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lane_5fmarking_2eproto();
void protobuf_AssignDesc_lane_5fmarking_2eproto();
void protobuf_ShutdownFile_lane_5fmarking_2eproto();

class LaneMarking;

enum LaneMarking_Type {
  LaneMarking_Type_UNKNOWN = 0,
  LaneMarking_Type_ARROW_LEFT = 1,
  LaneMarking_Type_ARROW_FORWARD = 2,
  LaneMarking_Type_ARROW_RIGHT = 3,
  LaneMarking_Type_ARROW_LEFT_AND_FORWARD = 4,
  LaneMarking_Type_ARROW_RIGHT_AND_FORWARD = 5,
  LaneMarking_Type_ARROW_LEFT_AND_RIGHT = 6,
  LaneMarking_Type_ARROW_U_TURN = 7,
  LaneMarking_Type_ARROW_U_TURN_AND_FORWARD = 8,
  LaneMarking_Type_ARROW_U_TURN_AND_LEFT = 9,
  LaneMarking_Type_ARROW_MERGE_LEFT = 10,
  LaneMarking_Type_ARROW_MERGE_RIGHT = 11,
  LaneMarking_Type_CROSSWALK_NOTICE = 12,
  LaneMarking_Type_SPEED_LIMIT_LOW = 13,
  LaneMarking_Type_SPEED_LIMIT_HIGH = 14
};
bool LaneMarking_Type_IsValid(int value);
const LaneMarking_Type LaneMarking_Type_Type_MIN = LaneMarking_Type_UNKNOWN;
const LaneMarking_Type LaneMarking_Type_Type_MAX = LaneMarking_Type_SPEED_LIMIT_HIGH;
const int LaneMarking_Type_Type_ARRAYSIZE = LaneMarking_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneMarking_Type_descriptor();
inline const ::std::string& LaneMarking_Type_Name(LaneMarking_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneMarking_Type_descriptor(), value);
}
inline bool LaneMarking_Type_Parse(
    const ::std::string& name, LaneMarking_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneMarking_Type>(
    LaneMarking_Type_descriptor(), name, value);
}
// ===================================================================

class LaneMarking : public ::google::protobuf::Message {
 public:
  LaneMarking();
  virtual ~LaneMarking();

  LaneMarking(const LaneMarking& from);

  inline LaneMarking& operator=(const LaneMarking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMarking& default_instance();

  void Swap(LaneMarking* other);

  // implements Message ----------------------------------------------

  LaneMarking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneMarking& from);
  void MergeFrom(const LaneMarking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneMarking_Type Type;
  static const Type UNKNOWN = LaneMarking_Type_UNKNOWN;
  static const Type ARROW_LEFT = LaneMarking_Type_ARROW_LEFT;
  static const Type ARROW_FORWARD = LaneMarking_Type_ARROW_FORWARD;
  static const Type ARROW_RIGHT = LaneMarking_Type_ARROW_RIGHT;
  static const Type ARROW_LEFT_AND_FORWARD = LaneMarking_Type_ARROW_LEFT_AND_FORWARD;
  static const Type ARROW_RIGHT_AND_FORWARD = LaneMarking_Type_ARROW_RIGHT_AND_FORWARD;
  static const Type ARROW_LEFT_AND_RIGHT = LaneMarking_Type_ARROW_LEFT_AND_RIGHT;
  static const Type ARROW_U_TURN = LaneMarking_Type_ARROW_U_TURN;
  static const Type ARROW_U_TURN_AND_FORWARD = LaneMarking_Type_ARROW_U_TURN_AND_FORWARD;
  static const Type ARROW_U_TURN_AND_LEFT = LaneMarking_Type_ARROW_U_TURN_AND_LEFT;
  static const Type ARROW_MERGE_LEFT = LaneMarking_Type_ARROW_MERGE_LEFT;
  static const Type ARROW_MERGE_RIGHT = LaneMarking_Type_ARROW_MERGE_RIGHT;
  static const Type CROSSWALK_NOTICE = LaneMarking_Type_CROSSWALK_NOTICE;
  static const Type SPEED_LIMIT_LOW = LaneMarking_Type_SPEED_LIMIT_LOW;
  static const Type SPEED_LIMIT_HIGH = LaneMarking_Type_SPEED_LIMIT_HIGH;
  static inline bool Type_IsValid(int value) {
    return LaneMarking_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneMarking_Type_Type_MIN;
  static const Type Type_MAX =
    LaneMarking_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneMarking_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneMarking_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneMarking_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneMarking_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // optional .hdmap_proto.LaneMarking.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::hdmap_proto::LaneMarking_Type type() const;
  inline void set_type(::hdmap_proto::LaneMarking_Type value);

  // required .hdmap_proto.Polygon border = 4;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 4;
  inline const ::hdmap_proto::Polygon& border() const;
  inline ::hdmap_proto::Polygon* mutable_border();
  inline ::hdmap_proto::Polygon* release_border();
  inline void set_allocated_border(::hdmap_proto::Polygon* border);

  // optional float value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline float value() const;
  inline void set_value(float value);

  // repeated .hdmap_proto.Id link_ids = 6;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 6;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.LaneMarking)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::Polygon* border_;
  int type_;
  float value_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  friend void  protobuf_AddDesc_lane_5fmarking_2eproto();
  friend void protobuf_AssignDesc_lane_5fmarking_2eproto();
  friend void protobuf_ShutdownFile_lane_5fmarking_2eproto();

  void InitAsDefaultInstance();
  static LaneMarking* default_instance_;
};
// ===================================================================


// ===================================================================

// LaneMarking

// required .hdmap_proto.Id id = 1;
inline bool LaneMarking::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneMarking::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneMarking::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneMarking::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& LaneMarking::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.LaneMarking.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* LaneMarking::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.LaneMarking.id)
  return id_;
}
inline ::hdmap_proto::Id* LaneMarking::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void LaneMarking::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.LaneMarking.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int LaneMarking::tile_ids_size() const {
  return tile_ids_.size();
}
inline void LaneMarking::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& LaneMarking::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.LaneMarking.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* LaneMarking::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.LaneMarking.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* LaneMarking::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.LaneMarking.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
LaneMarking::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.LaneMarking.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
LaneMarking::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.LaneMarking.tile_ids)
  return &tile_ids_;
}

// optional .hdmap_proto.LaneMarking.Type type = 3;
inline bool LaneMarking::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneMarking::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneMarking::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneMarking::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdmap_proto::LaneMarking_Type LaneMarking::type() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.LaneMarking.type)
  return static_cast< ::hdmap_proto::LaneMarking_Type >(type_);
}
inline void LaneMarking::set_type(::hdmap_proto::LaneMarking_Type value) {
  assert(::hdmap_proto::LaneMarking_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.LaneMarking.type)
}

// required .hdmap_proto.Polygon border = 4;
inline bool LaneMarking::has_border() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneMarking::set_has_border() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneMarking::clear_has_border() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneMarking::clear_border() {
  if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
  clear_has_border();
}
inline const ::hdmap_proto::Polygon& LaneMarking::border() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.LaneMarking.border)
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::hdmap_proto::Polygon* LaneMarking::mutable_border() {
  set_has_border();
  if (border_ == NULL) border_ = new ::hdmap_proto::Polygon;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.LaneMarking.border)
  return border_;
}
inline ::hdmap_proto::Polygon* LaneMarking::release_border() {
  clear_has_border();
  ::hdmap_proto::Polygon* temp = border_;
  border_ = NULL;
  return temp;
}
inline void LaneMarking::set_allocated_border(::hdmap_proto::Polygon* border) {
  delete border_;
  border_ = border;
  if (border) {
    set_has_border();
  } else {
    clear_has_border();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.LaneMarking.border)
}

// optional float value = 5;
inline bool LaneMarking::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneMarking::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneMarking::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneMarking::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float LaneMarking::value() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.LaneMarking.value)
  return value_;
}
inline void LaneMarking::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.LaneMarking.value)
}

// repeated .hdmap_proto.Id link_ids = 6;
inline int LaneMarking::link_ids_size() const {
  return link_ids_.size();
}
inline void LaneMarking::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& LaneMarking::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.LaneMarking.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* LaneMarking::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.LaneMarking.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* LaneMarking::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.LaneMarking.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
LaneMarking::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.LaneMarking.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
LaneMarking::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.LaneMarking.link_ids)
  return &link_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdmap_proto::LaneMarking_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::LaneMarking_Type>() {
  return ::hdmap_proto::LaneMarking_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lane_5fmarking_2eproto__INCLUDED
