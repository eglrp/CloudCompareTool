// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribute.proto

#ifndef PROTOBUF_attribute_2eproto__INCLUDED
#define PROTOBUF_attribute_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_attribute_2eproto();
void protobuf_AssignDesc_attribute_2eproto();
void protobuf_ShutdownFile_attribute_2eproto();

class Color;
class CurveAttr;

enum CurveAttr_Type {
  CurveAttr_Type_UNKNOWN = 0,
  CurveAttr_Type_DOTTED_YELLOW_LINE = 1,
  CurveAttr_Type_DOTTED_YELLOW_BLANK = 2,
  CurveAttr_Type_DOTTED_WHITE_LINE = 3,
  CurveAttr_Type_DOTTED_WHITE_BLANK = 4,
  CurveAttr_Type_SOLID_YELLOW = 5,
  CurveAttr_Type_SOLID_WHITE = 6,
  CurveAttr_Type_DOUBLE_YELLOW = 7,
  CurveAttr_Type_CURB = 8
};
bool CurveAttr_Type_IsValid(int value);
const CurveAttr_Type CurveAttr_Type_Type_MIN = CurveAttr_Type_UNKNOWN;
const CurveAttr_Type CurveAttr_Type_Type_MAX = CurveAttr_Type_CURB;
const int CurveAttr_Type_Type_ARRAYSIZE = CurveAttr_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurveAttr_Type_descriptor();
inline const ::std::string& CurveAttr_Type_Name(CurveAttr_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurveAttr_Type_descriptor(), value);
}
inline bool CurveAttr_Type_Parse(
    const ::std::string& name, CurveAttr_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurveAttr_Type>(
    CurveAttr_Type_descriptor(), name, value);
}
enum ColorType {
  UNKNOWN = 0,
  GRAY = 1,
  WHITE = 2,
  BLACK = 3,
  RED = 4,
  GREEN = 5,
  BLUE = 6,
  YELLOW = 7,
  BROWN = 8
};
bool ColorType_IsValid(int value);
const ColorType ColorType_MIN = UNKNOWN;
const ColorType ColorType_MAX = BROWN;
const int ColorType_ARRAYSIZE = ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColorType_descriptor();
inline const ::std::string& ColorType_Name(ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColorType_descriptor(), value);
}
inline bool ColorType_Parse(
    const ::std::string& name, ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColorType>(
    ColorType_descriptor(), name, value);
}
// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);

  // required int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);

  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap_proto.Color)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  friend void  protobuf_AddDesc_attribute_2eproto();
  friend void protobuf_AssignDesc_attribute_2eproto();
  friend void protobuf_ShutdownFile_attribute_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class CurveAttr : public ::google::protobuf::Message {
 public:
  CurveAttr();
  virtual ~CurveAttr();

  CurveAttr(const CurveAttr& from);

  inline CurveAttr& operator=(const CurveAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurveAttr& default_instance();

  void Swap(CurveAttr* other);

  // implements Message ----------------------------------------------

  CurveAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurveAttr& from);
  void MergeFrom(const CurveAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CurveAttr_Type Type;
  static const Type UNKNOWN = CurveAttr_Type_UNKNOWN;
  static const Type DOTTED_YELLOW_LINE = CurveAttr_Type_DOTTED_YELLOW_LINE;
  static const Type DOTTED_YELLOW_BLANK = CurveAttr_Type_DOTTED_YELLOW_BLANK;
  static const Type DOTTED_WHITE_LINE = CurveAttr_Type_DOTTED_WHITE_LINE;
  static const Type DOTTED_WHITE_BLANK = CurveAttr_Type_DOTTED_WHITE_BLANK;
  static const Type SOLID_YELLOW = CurveAttr_Type_SOLID_YELLOW;
  static const Type SOLID_WHITE = CurveAttr_Type_SOLID_WHITE;
  static const Type DOUBLE_YELLOW = CurveAttr_Type_DOUBLE_YELLOW;
  static const Type CURB = CurveAttr_Type_CURB;
  static inline bool Type_IsValid(int value) {
    return CurveAttr_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CurveAttr_Type_Type_MIN;
  static const Type Type_MAX =
    CurveAttr_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CurveAttr_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CurveAttr_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CurveAttr_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CurveAttr_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 ref_idx = 1;
  inline bool has_ref_idx() const;
  inline void clear_ref_idx();
  static const int kRefIdxFieldNumber = 1;
  inline ::google::protobuf::uint64 ref_idx() const;
  inline void set_ref_idx(::google::protobuf::uint64 value);

  // required .hdmap_proto.CurveAttr.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::hdmap_proto::CurveAttr_Type type() const;
  inline void set_type(::hdmap_proto::CurveAttr_Type value);

  // required float width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline float width() const;
  inline void set_width(float value);

  // @@protoc_insertion_point(class_scope:hdmap_proto.CurveAttr)
 private:
  inline void set_has_ref_idx();
  inline void clear_has_ref_idx();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ref_idx_;
  int type_;
  float width_;
  friend void  protobuf_AddDesc_attribute_2eproto();
  friend void protobuf_AssignDesc_attribute_2eproto();
  friend void protobuf_ShutdownFile_attribute_2eproto();

  void InitAsDefaultInstance();
  static CurveAttr* default_instance_;
};
// ===================================================================


// ===================================================================

// Color

// required int32 r = 1;
inline bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline ::google::protobuf::int32 Color::r() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Color.r)
  return r_;
}
inline void Color::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Color.r)
}

// required int32 g = 2;
inline bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 Color::g() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Color.g)
  return g_;
}
inline void Color::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Color.g)
}

// required int32 b = 3;
inline bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 Color::b() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Color.b)
  return b_;
}
inline void Color::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Color.b)
}

// -------------------------------------------------------------------

// CurveAttr

// required uint64 ref_idx = 1;
inline bool CurveAttr::has_ref_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurveAttr::set_has_ref_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurveAttr::clear_has_ref_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurveAttr::clear_ref_idx() {
  ref_idx_ = GOOGLE_ULONGLONG(0);
  clear_has_ref_idx();
}
inline ::google::protobuf::uint64 CurveAttr::ref_idx() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CurveAttr.ref_idx)
  return ref_idx_;
}
inline void CurveAttr::set_ref_idx(::google::protobuf::uint64 value) {
  set_has_ref_idx();
  ref_idx_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.CurveAttr.ref_idx)
}

// required .hdmap_proto.CurveAttr.Type type = 2;
inline bool CurveAttr::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurveAttr::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurveAttr::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurveAttr::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdmap_proto::CurveAttr_Type CurveAttr::type() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CurveAttr.type)
  return static_cast< ::hdmap_proto::CurveAttr_Type >(type_);
}
inline void CurveAttr::set_type(::hdmap_proto::CurveAttr_Type value) {
  assert(::hdmap_proto::CurveAttr_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.CurveAttr.type)
}

// required float width = 3;
inline bool CurveAttr::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurveAttr::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurveAttr::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurveAttr::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float CurveAttr::width() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CurveAttr.width)
  return width_;
}
inline void CurveAttr::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.CurveAttr.width)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdmap_proto::CurveAttr_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::CurveAttr_Type>() {
  return ::hdmap_proto::CurveAttr_Type_descriptor();
}
template <> struct is_proto_enum< ::hdmap_proto::ColorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::ColorType>() {
  return ::hdmap_proto::ColorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_attribute_2eproto__INCLUDED
