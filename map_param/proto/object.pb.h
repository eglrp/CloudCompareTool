// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef PROTOBUF_object_2eproto__INCLUDED
#define PROTOBUF_object_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_object_2eproto();
void protobuf_AssignDesc_object_2eproto();
void protobuf_ShutdownFile_object_2eproto();

class StopLine;
class SpeedBump;
class Pole;
class Board;
class CrossWalk;
class Zone;
class ParkingSpace;
class Junction;

// ===================================================================

class StopLine : public ::google::protobuf::Message {
 public:
  StopLine();
  virtual ~StopLine();

  StopLine(const StopLine& from);

  inline StopLine& operator=(const StopLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopLine& default_instance();

  void Swap(StopLine* other);

  // implements Message ----------------------------------------------

  StopLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopLine& from);
  void MergeFrom(const StopLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // required .hdmap_proto.LineSegment line = 4;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 4;
  inline const ::hdmap_proto::LineSegment& line() const;
  inline ::hdmap_proto::LineSegment* mutable_line();
  inline ::hdmap_proto::LineSegment* release_line();
  inline void set_allocated_line(::hdmap_proto::LineSegment* line);

  // required float width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline float width() const;
  inline void set_width(float value);

  // repeated .hdmap_proto.Id link_ids = 6;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 6;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.StopLine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::LineSegment* line_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  float width_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static StopLine* default_instance_;
};
// -------------------------------------------------------------------

class SpeedBump : public ::google::protobuf::Message {
 public:
  SpeedBump();
  virtual ~SpeedBump();

  SpeedBump(const SpeedBump& from);

  inline SpeedBump& operator=(const SpeedBump& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedBump& default_instance();

  void Swap(SpeedBump* other);

  // implements Message ----------------------------------------------

  SpeedBump* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeedBump& from);
  void MergeFrom(const SpeedBump& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // required .hdmap_proto.Polygon polygon = 4;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 4;
  inline const ::hdmap_proto::Polygon& polygon() const;
  inline ::hdmap_proto::Polygon* mutable_polygon();
  inline ::hdmap_proto::Polygon* release_polygon();
  inline void set_allocated_polygon(::hdmap_proto::Polygon* polygon);

  // required float height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline float height() const;
  inline void set_height(float value);

  // repeated .hdmap_proto.Id link_ids = 6;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 6;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.SpeedBump)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polygon();
  inline void clear_has_polygon();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::Polygon* polygon_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  float height_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static SpeedBump* default_instance_;
};
// -------------------------------------------------------------------

class Pole : public ::google::protobuf::Message {
 public:
  Pole();
  virtual ~Pole();

  Pole(const Pole& from);

  inline Pole& operator=(const Pole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pole& default_instance();

  void Swap(Pole* other);

  // implements Message ----------------------------------------------

  Pole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pole& from);
  void MergeFrom(const Pole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // required .hdmap_proto.Cylinder cylinder = 3;
  inline bool has_cylinder() const;
  inline void clear_cylinder();
  static const int kCylinderFieldNumber = 3;
  inline const ::hdmap_proto::Cylinder& cylinder() const;
  inline ::hdmap_proto::Cylinder* mutable_cylinder();
  inline ::hdmap_proto::Cylinder* release_cylinder();
  inline void set_allocated_cylinder(::hdmap_proto::Cylinder* cylinder);

  // @@protoc_insertion_point(class_scope:hdmap_proto.Pole)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cylinder();
  inline void clear_has_cylinder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::Cylinder* cylinder_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Pole* default_instance_;
};
// -------------------------------------------------------------------

class Board : public ::google::protobuf::Message {
 public:
  Board();
  virtual ~Board();

  Board(const Board& from);

  inline Board& operator=(const Board& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Board& default_instance();

  void Swap(Board* other);

  // implements Message ----------------------------------------------

  Board* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Board& from);
  void MergeFrom(const Board& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // required .hdmap_proto.Polygon polygon = 3;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 3;
  inline const ::hdmap_proto::Polygon& polygon() const;
  inline ::hdmap_proto::Polygon* mutable_polygon();
  inline ::hdmap_proto::Polygon* release_polygon();
  inline void set_allocated_polygon(::hdmap_proto::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:hdmap_proto.Board)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polygon();
  inline void clear_has_polygon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::Polygon* polygon_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Board* default_instance_;
};
// -------------------------------------------------------------------

class CrossWalk : public ::google::protobuf::Message {
 public:
  CrossWalk();
  virtual ~CrossWalk();

  CrossWalk(const CrossWalk& from);

  inline CrossWalk& operator=(const CrossWalk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossWalk& default_instance();

  void Swap(CrossWalk* other);

  // implements Message ----------------------------------------------

  CrossWalk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossWalk& from);
  void MergeFrom(const CrossWalk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .hdmap_proto.Polygon border = 4;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 4;
  inline const ::hdmap_proto::Polygon& border() const;
  inline ::hdmap_proto::Polygon* mutable_border();
  inline ::hdmap_proto::Polygon* release_border();
  inline void set_allocated_border(::hdmap_proto::Polygon* border);

  // repeated .hdmap_proto.Polygon lines = 5;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 5;
  inline const ::hdmap_proto::Polygon& lines(int index) const;
  inline ::hdmap_proto::Polygon* mutable_lines(int index);
  inline ::hdmap_proto::Polygon* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Polygon >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Polygon >*
      mutable_lines();

  // repeated .hdmap_proto.Id link_ids = 6;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 6;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.CrossWalk)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_border();
  inline void clear_has_border();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::std::string* name_;
  ::hdmap_proto::Polygon* border_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Polygon > lines_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static CrossWalk* default_instance_;
};
// -------------------------------------------------------------------

class Zone : public ::google::protobuf::Message {
 public:
  Zone();
  virtual ~Zone();

  Zone(const Zone& from);

  inline Zone& operator=(const Zone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Zone& default_instance();

  void Swap(Zone* other);

  // implements Message ----------------------------------------------

  Zone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Zone& from);
  void MergeFrom(const Zone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // required .hdmap_proto.Polygon border = 3;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 3;
  inline const ::hdmap_proto::Polygon& border() const;
  inline ::hdmap_proto::Polygon* mutable_border();
  inline ::hdmap_proto::Polygon* release_border();
  inline void set_allocated_border(::hdmap_proto::Polygon* border);

  // repeated .hdmap_proto.Id link_ids = 4;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 4;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.Zone)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_border();
  inline void clear_has_border();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::Polygon* border_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Zone* default_instance_;
};
// -------------------------------------------------------------------

class ParkingSpace : public ::google::protobuf::Message {
 public:
  ParkingSpace();
  virtual ~ParkingSpace();

  ParkingSpace(const ParkingSpace& from);

  inline ParkingSpace& operator=(const ParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSpace& default_instance();

  void Swap(ParkingSpace* other);

  // implements Message ----------------------------------------------

  ParkingSpace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParkingSpace& from);
  void MergeFrom(const ParkingSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // repeated .hdmap_proto.ParkingSlot parkingslots = 3;
  inline int parkingslots_size() const;
  inline void clear_parkingslots();
  static const int kParkingslotsFieldNumber = 3;
  inline const ::hdmap_proto::ParkingSlot& parkingslots(int index) const;
  inline ::hdmap_proto::ParkingSlot* mutable_parkingslots(int index);
  inline ::hdmap_proto::ParkingSlot* add_parkingslots();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >&
      parkingslots() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >*
      mutable_parkingslots();

  // repeated .hdmap_proto.Id link_ids = 4;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 4;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.ParkingSpace)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot > parkingslots_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static ParkingSpace* default_instance_;
};
// -------------------------------------------------------------------

class Junction : public ::google::protobuf::Message {
 public:
  Junction();
  virtual ~Junction();

  Junction(const Junction& from);

  inline Junction& operator=(const Junction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Junction& default_instance();

  void Swap(Junction* other);

  // implements Message ----------------------------------------------

  Junction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Junction& from);
  void MergeFrom(const Junction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::hdmap_proto::Id& id() const;
  inline ::hdmap_proto::Id* mutable_id();
  inline ::hdmap_proto::Id* release_id();
  inline void set_allocated_id(::hdmap_proto::Id* id);

  // repeated .hdmap_proto.Id tile_ids = 2;
  inline int tile_ids_size() const;
  inline void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  inline const ::hdmap_proto::Id& tile_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_tile_ids(int index);
  inline ::hdmap_proto::Id* add_tile_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      tile_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_tile_ids();

  // required .hdmap_proto.Polygon polygon = 4;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 4;
  inline const ::hdmap_proto::Polygon& polygon() const;
  inline ::hdmap_proto::Polygon* mutable_polygon();
  inline ::hdmap_proto::Polygon* release_polygon();
  inline void set_allocated_polygon(::hdmap_proto::Polygon* polygon);

  // repeated .hdmap_proto.Id link_ids = 5;
  inline int link_ids_size() const;
  inline void clear_link_ids();
  static const int kLinkIdsFieldNumber = 5;
  inline const ::hdmap_proto::Id& link_ids(int index) const;
  inline ::hdmap_proto::Id* mutable_link_ids(int index);
  inline ::hdmap_proto::Id* add_link_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();

  // @@protoc_insertion_point(class_scope:hdmap_proto.Junction)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polygon();
  inline void clear_has_polygon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > tile_ids_;
  ::hdmap_proto::Polygon* polygon_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Junction* default_instance_;
};
// ===================================================================


// ===================================================================

// StopLine

// required .hdmap_proto.Id id = 1;
inline bool StopLine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopLine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopLine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopLine::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& StopLine::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.StopLine.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* StopLine::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.StopLine.id)
  return id_;
}
inline ::hdmap_proto::Id* StopLine::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void StopLine::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.StopLine.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int StopLine::tile_ids_size() const {
  return tile_ids_.size();
}
inline void StopLine::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& StopLine::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.StopLine.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* StopLine::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.StopLine.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* StopLine::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.StopLine.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
StopLine::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.StopLine.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
StopLine::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.StopLine.tile_ids)
  return &tile_ids_;
}

// required .hdmap_proto.LineSegment line = 4;
inline bool StopLine::has_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopLine::set_has_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopLine::clear_has_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopLine::clear_line() {
  if (line_ != NULL) line_->::hdmap_proto::LineSegment::Clear();
  clear_has_line();
}
inline const ::hdmap_proto::LineSegment& StopLine::line() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.StopLine.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::hdmap_proto::LineSegment* StopLine::mutable_line() {
  set_has_line();
  if (line_ == NULL) line_ = new ::hdmap_proto::LineSegment;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.StopLine.line)
  return line_;
}
inline ::hdmap_proto::LineSegment* StopLine::release_line() {
  clear_has_line();
  ::hdmap_proto::LineSegment* temp = line_;
  line_ = NULL;
  return temp;
}
inline void StopLine::set_allocated_line(::hdmap_proto::LineSegment* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.StopLine.line)
}

// required float width = 5;
inline bool StopLine::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopLine::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopLine::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopLine::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float StopLine::width() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.StopLine.width)
  return width_;
}
inline void StopLine::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.StopLine.width)
}

// repeated .hdmap_proto.Id link_ids = 6;
inline int StopLine::link_ids_size() const {
  return link_ids_.size();
}
inline void StopLine::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& StopLine::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.StopLine.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* StopLine::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.StopLine.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* StopLine::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.StopLine.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
StopLine::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.StopLine.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
StopLine::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.StopLine.link_ids)
  return &link_ids_;
}

// -------------------------------------------------------------------

// SpeedBump

// required .hdmap_proto.Id id = 1;
inline bool SpeedBump::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedBump::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedBump::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedBump::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& SpeedBump::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SpeedBump.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* SpeedBump::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SpeedBump.id)
  return id_;
}
inline ::hdmap_proto::Id* SpeedBump::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void SpeedBump::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.SpeedBump.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int SpeedBump::tile_ids_size() const {
  return tile_ids_.size();
}
inline void SpeedBump::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& SpeedBump::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SpeedBump.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* SpeedBump::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SpeedBump.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* SpeedBump::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.SpeedBump.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
SpeedBump::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.SpeedBump.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
SpeedBump::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.SpeedBump.tile_ids)
  return &tile_ids_;
}

// required .hdmap_proto.Polygon polygon = 4;
inline bool SpeedBump::has_polygon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedBump::set_has_polygon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedBump::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedBump::clear_polygon() {
  if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::hdmap_proto::Polygon& SpeedBump::polygon() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SpeedBump.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::hdmap_proto::Polygon* SpeedBump::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::hdmap_proto::Polygon;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SpeedBump.polygon)
  return polygon_;
}
inline ::hdmap_proto::Polygon* SpeedBump::release_polygon() {
  clear_has_polygon();
  ::hdmap_proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void SpeedBump::set_allocated_polygon(::hdmap_proto::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.SpeedBump.polygon)
}

// required float height = 5;
inline bool SpeedBump::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedBump::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedBump::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedBump::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float SpeedBump::height() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SpeedBump.height)
  return height_;
}
inline void SpeedBump::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.SpeedBump.height)
}

// repeated .hdmap_proto.Id link_ids = 6;
inline int SpeedBump::link_ids_size() const {
  return link_ids_.size();
}
inline void SpeedBump::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& SpeedBump::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SpeedBump.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* SpeedBump::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SpeedBump.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* SpeedBump::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.SpeedBump.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
SpeedBump::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.SpeedBump.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
SpeedBump::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.SpeedBump.link_ids)
  return &link_ids_;
}

// -------------------------------------------------------------------

// Pole

// required .hdmap_proto.Id id = 1;
inline bool Pole::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pole::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pole::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pole::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Pole::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Pole.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Pole::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Pole.id)
  return id_;
}
inline ::hdmap_proto::Id* Pole::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Pole::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Pole.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int Pole::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Pole::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& Pole::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Pole.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* Pole::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Pole.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Pole::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Pole.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Pole::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Pole.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Pole::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Pole.tile_ids)
  return &tile_ids_;
}

// required .hdmap_proto.Cylinder cylinder = 3;
inline bool Pole::has_cylinder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pole::set_has_cylinder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pole::clear_has_cylinder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pole::clear_cylinder() {
  if (cylinder_ != NULL) cylinder_->::hdmap_proto::Cylinder::Clear();
  clear_has_cylinder();
}
inline const ::hdmap_proto::Cylinder& Pole::cylinder() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Pole.cylinder)
  return cylinder_ != NULL ? *cylinder_ : *default_instance_->cylinder_;
}
inline ::hdmap_proto::Cylinder* Pole::mutable_cylinder() {
  set_has_cylinder();
  if (cylinder_ == NULL) cylinder_ = new ::hdmap_proto::Cylinder;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Pole.cylinder)
  return cylinder_;
}
inline ::hdmap_proto::Cylinder* Pole::release_cylinder() {
  clear_has_cylinder();
  ::hdmap_proto::Cylinder* temp = cylinder_;
  cylinder_ = NULL;
  return temp;
}
inline void Pole::set_allocated_cylinder(::hdmap_proto::Cylinder* cylinder) {
  delete cylinder_;
  cylinder_ = cylinder;
  if (cylinder) {
    set_has_cylinder();
  } else {
    clear_has_cylinder();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Pole.cylinder)
}

// -------------------------------------------------------------------

// Board

// required .hdmap_proto.Id id = 1;
inline bool Board::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Board::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Board::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Board::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Board::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Board.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Board::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Board.id)
  return id_;
}
inline ::hdmap_proto::Id* Board::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Board::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Board.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int Board::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Board::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& Board::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Board.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* Board::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Board.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Board::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Board.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Board::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Board.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Board::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Board.tile_ids)
  return &tile_ids_;
}

// required .hdmap_proto.Polygon polygon = 3;
inline bool Board::has_polygon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Board::set_has_polygon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Board::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Board::clear_polygon() {
  if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::hdmap_proto::Polygon& Board::polygon() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Board.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::hdmap_proto::Polygon* Board::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::hdmap_proto::Polygon;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Board.polygon)
  return polygon_;
}
inline ::hdmap_proto::Polygon* Board::release_polygon() {
  clear_has_polygon();
  ::hdmap_proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Board::set_allocated_polygon(::hdmap_proto::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Board.polygon)
}

// -------------------------------------------------------------------

// CrossWalk

// required .hdmap_proto.Id id = 1;
inline bool CrossWalk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrossWalk::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrossWalk::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrossWalk::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& CrossWalk::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CrossWalk.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* CrossWalk::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.CrossWalk.id)
  return id_;
}
inline ::hdmap_proto::Id* CrossWalk::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void CrossWalk::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.CrossWalk.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int CrossWalk::tile_ids_size() const {
  return tile_ids_.size();
}
inline void CrossWalk::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& CrossWalk::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CrossWalk.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* CrossWalk::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.CrossWalk.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* CrossWalk::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.CrossWalk.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
CrossWalk::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.CrossWalk.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
CrossWalk::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.CrossWalk.tile_ids)
  return &tile_ids_;
}

// optional string name = 3;
inline bool CrossWalk::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrossWalk::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrossWalk::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrossWalk::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CrossWalk::name() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CrossWalk.name)
  return *name_;
}
inline void CrossWalk::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:hdmap_proto.CrossWalk.name)
}
inline void CrossWalk::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:hdmap_proto.CrossWalk.name)
}
inline void CrossWalk::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hdmap_proto.CrossWalk.name)
}
inline ::std::string* CrossWalk::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.CrossWalk.name)
  return name_;
}
inline ::std::string* CrossWalk::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CrossWalk::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.CrossWalk.name)
}

// required .hdmap_proto.Polygon border = 4;
inline bool CrossWalk::has_border() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrossWalk::set_has_border() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrossWalk::clear_has_border() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrossWalk::clear_border() {
  if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
  clear_has_border();
}
inline const ::hdmap_proto::Polygon& CrossWalk::border() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CrossWalk.border)
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::hdmap_proto::Polygon* CrossWalk::mutable_border() {
  set_has_border();
  if (border_ == NULL) border_ = new ::hdmap_proto::Polygon;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.CrossWalk.border)
  return border_;
}
inline ::hdmap_proto::Polygon* CrossWalk::release_border() {
  clear_has_border();
  ::hdmap_proto::Polygon* temp = border_;
  border_ = NULL;
  return temp;
}
inline void CrossWalk::set_allocated_border(::hdmap_proto::Polygon* border) {
  delete border_;
  border_ = border;
  if (border) {
    set_has_border();
  } else {
    clear_has_border();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.CrossWalk.border)
}

// repeated .hdmap_proto.Polygon lines = 5;
inline int CrossWalk::lines_size() const {
  return lines_.size();
}
inline void CrossWalk::clear_lines() {
  lines_.Clear();
}
inline const ::hdmap_proto::Polygon& CrossWalk::lines(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CrossWalk.lines)
  return lines_.Get(index);
}
inline ::hdmap_proto::Polygon* CrossWalk::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.CrossWalk.lines)
  return lines_.Mutable(index);
}
inline ::hdmap_proto::Polygon* CrossWalk::add_lines() {
  // @@protoc_insertion_point(field_add:hdmap_proto.CrossWalk.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Polygon >&
CrossWalk::lines() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.CrossWalk.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Polygon >*
CrossWalk::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.CrossWalk.lines)
  return &lines_;
}

// repeated .hdmap_proto.Id link_ids = 6;
inline int CrossWalk::link_ids_size() const {
  return link_ids_.size();
}
inline void CrossWalk::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& CrossWalk::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.CrossWalk.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* CrossWalk::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.CrossWalk.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* CrossWalk::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.CrossWalk.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
CrossWalk::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.CrossWalk.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
CrossWalk::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.CrossWalk.link_ids)
  return &link_ids_;
}

// -------------------------------------------------------------------

// Zone

// required .hdmap_proto.Id id = 1;
inline bool Zone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zone::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zone::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zone::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Zone::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Zone::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.id)
  return id_;
}
inline ::hdmap_proto::Id* Zone::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Zone::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Zone.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int Zone::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Zone::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& Zone::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* Zone::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Zone::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Zone.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Zone::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Zone.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Zone::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Zone.tile_ids)
  return &tile_ids_;
}

// required .hdmap_proto.Polygon border = 3;
inline bool Zone::has_border() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Zone::set_has_border() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Zone::clear_has_border() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Zone::clear_border() {
  if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
  clear_has_border();
}
inline const ::hdmap_proto::Polygon& Zone::border() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.border)
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::hdmap_proto::Polygon* Zone::mutable_border() {
  set_has_border();
  if (border_ == NULL) border_ = new ::hdmap_proto::Polygon;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.border)
  return border_;
}
inline ::hdmap_proto::Polygon* Zone::release_border() {
  clear_has_border();
  ::hdmap_proto::Polygon* temp = border_;
  border_ = NULL;
  return temp;
}
inline void Zone::set_allocated_border(::hdmap_proto::Polygon* border) {
  delete border_;
  border_ = border;
  if (border) {
    set_has_border();
  } else {
    clear_has_border();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Zone.border)
}

// repeated .hdmap_proto.Id link_ids = 4;
inline int Zone::link_ids_size() const {
  return link_ids_.size();
}
inline void Zone::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& Zone::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* Zone::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Zone::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Zone.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Zone::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Zone.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Zone::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Zone.link_ids)
  return &link_ids_;
}

// -------------------------------------------------------------------

// ParkingSpace

// required .hdmap_proto.Id id = 1;
inline bool ParkingSpace::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkingSpace::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkingSpace::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkingSpace::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& ParkingSpace::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* ParkingSpace::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.id)
  return id_;
}
inline ::hdmap_proto::Id* ParkingSpace::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ParkingSpace::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.ParkingSpace.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int ParkingSpace::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ParkingSpace::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& ParkingSpace::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* ParkingSpace::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* ParkingSpace::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
ParkingSpace::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.ParkingSpace.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
ParkingSpace::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.ParkingSpace.tile_ids)
  return &tile_ids_;
}

// repeated .hdmap_proto.ParkingSlot parkingslots = 3;
inline int ParkingSpace::parkingslots_size() const {
  return parkingslots_.size();
}
inline void ParkingSpace::clear_parkingslots() {
  parkingslots_.Clear();
}
inline const ::hdmap_proto::ParkingSlot& ParkingSpace::parkingslots(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.parkingslots)
  return parkingslots_.Get(index);
}
inline ::hdmap_proto::ParkingSlot* ParkingSpace::mutable_parkingslots(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.parkingslots)
  return parkingslots_.Mutable(index);
}
inline ::hdmap_proto::ParkingSlot* ParkingSpace::add_parkingslots() {
  // @@protoc_insertion_point(field_add:hdmap_proto.ParkingSpace.parkingslots)
  return parkingslots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >&
ParkingSpace::parkingslots() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.ParkingSpace.parkingslots)
  return parkingslots_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::ParkingSlot >*
ParkingSpace::mutable_parkingslots() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.ParkingSpace.parkingslots)
  return &parkingslots_;
}

// repeated .hdmap_proto.Id link_ids = 4;
inline int ParkingSpace::link_ids_size() const {
  return link_ids_.size();
}
inline void ParkingSpace::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& ParkingSpace::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* ParkingSpace::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* ParkingSpace::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
ParkingSpace::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.ParkingSpace.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
ParkingSpace::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.ParkingSpace.link_ids)
  return &link_ids_;
}

// -------------------------------------------------------------------

// Junction

// required .hdmap_proto.Id id = 1;
inline bool Junction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Junction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Junction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Junction::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Junction::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Junction.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Junction::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::hdmap_proto::Id;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Junction.id)
  return id_;
}
inline ::hdmap_proto::Id* Junction::release_id() {
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Junction::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Junction.id)
}

// repeated .hdmap_proto.Id tile_ids = 2;
inline int Junction::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Junction::clear_tile_ids() {
  tile_ids_.Clear();
}
inline const ::hdmap_proto::Id& Junction::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Junction.tile_ids)
  return tile_ids_.Get(index);
}
inline ::hdmap_proto::Id* Junction::mutable_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Junction.tile_ids)
  return tile_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Junction::add_tile_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Junction.tile_ids)
  return tile_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Junction::tile_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Junction.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Junction::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Junction.tile_ids)
  return &tile_ids_;
}

// required .hdmap_proto.Polygon polygon = 4;
inline bool Junction::has_polygon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Junction::set_has_polygon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Junction::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Junction::clear_polygon() {
  if (polygon_ != NULL) polygon_->::hdmap_proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::hdmap_proto::Polygon& Junction::polygon() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Junction.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::hdmap_proto::Polygon* Junction::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::hdmap_proto::Polygon;
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Junction.polygon)
  return polygon_;
}
inline ::hdmap_proto::Polygon* Junction::release_polygon() {
  clear_has_polygon();
  ::hdmap_proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Junction::set_allocated_polygon(::hdmap_proto::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Junction.polygon)
}

// repeated .hdmap_proto.Id link_ids = 5;
inline int Junction::link_ids_size() const {
  return link_ids_.size();
}
inline void Junction::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& Junction::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Junction.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* Junction::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Junction.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Junction::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Junction.link_ids)
  return link_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Junction::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Junction.link_ids)
  return link_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Junction::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Junction.link_ids)
  return &link_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_object_2eproto__INCLUDED
